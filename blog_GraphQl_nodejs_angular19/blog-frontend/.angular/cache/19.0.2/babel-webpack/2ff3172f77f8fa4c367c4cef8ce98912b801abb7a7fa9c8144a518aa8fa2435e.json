{"ast":null,"code":"import { __decorate } from \"tslib\";\n// src/app/services/post.service.ts\nimport { Injectable } from '@angular/core';\nimport { Apollo, gql } from 'apollo-angular';\nlet PostService = class PostService {\n  apollo;\n  constructor(apollo) {\n    this.apollo = apollo;\n  }\n  getPosts() {\n    return this.apollo.query({\n      query: gql`\n        query {\n          posts {\n            id\n            title\n            content\n            likes\n            dislikes,\n            createdAt,\n            user {\n              id\n              name\n              email\n            }\n            comments {\n              id\n              content\n              createdAt\n              user {\n                id\n                name\n               email\n              }\n            }\n          }\n        }\n      `,\n      fetchPolicy: 'network-only'\n    });\n  }\n  addPost(title, content, userId) {\n    return this.apollo.mutate({\n      mutation: gql`\n        mutation ($title: String!, $content: String!, $userId: ID!) {\n          addPost(title: $title, content: $content, userId: $userId) {\n            id\n            title\n          }\n        }\n      `,\n      variables: {\n        title,\n        content,\n        userId\n      }\n    });\n  }\n  likePost(postId) {\n    return this.apollo.mutate({\n      mutation: gql`\n        mutation ($postId: ID!) {\n          likePost(postId: $postId) {\n            id\n            likes\n          }\n        }\n      `,\n      variables: {\n        postId\n      }\n    });\n  }\n  dislikePost(postId) {\n    return this.apollo.mutate({\n      mutation: gql`\n        mutation ($postId: ID!) {\n          dislikePost(postId: $postId) {\n            id\n            dislikes\n          }\n        }\n      `,\n      variables: {\n        postId\n      }\n    });\n  }\n  static ctorParameters = () => [{\n    type: Apollo\n  }];\n};\nPostService = __decorate([Injectable({\n  providedIn: 'root'\n})], PostService);\nexport { PostService };","map":{"version":3,"names":["Injectable","Apollo","gql","PostService","apollo","constructor","getPosts","query","fetchPolicy","addPost","title","content","userId","mutate","mutation","variables","likePost","postId","dislikePost","__decorate","providedIn"],"sources":["D:\\myWork\\posts\\post\\blog_GraphQl_nodejs_angular19\\blog-frontend\\src\\app\\services\\post.service.ts"],"sourcesContent":["// src/app/services/post.service.ts\r\nimport { Injectable } from '@angular/core';\r\nimport { Apollo, gql } from 'apollo-angular';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PostService {\r\n  constructor(private apollo: Apollo) {}\r\n\r\n  getPosts() :Observable<any> {\r\n    return this.apollo.query({\r\n      query: gql`\r\n        query {\r\n          posts {\r\n            id\r\n            title\r\n            content\r\n            likes\r\n            dislikes,\r\n            createdAt,\r\n            user {\r\n              id\r\n              name\r\n              email\r\n            }\r\n            comments {\r\n              id\r\n              content\r\n              createdAt\r\n              user {\r\n                id\r\n                name\r\n               email\r\n              }\r\n            }\r\n          }\r\n        }\r\n      `,fetchPolicy: 'network-only'\r\n    });\r\n  }\r\n\r\n  addPost(title: string, content: string, userId: string|undefined) {\r\n    return this.apollo.mutate({\r\n      mutation: gql`\r\n        mutation ($title: String!, $content: String!, $userId: ID!) {\r\n          addPost(title: $title, content: $content, userId: $userId) {\r\n            id\r\n            title\r\n          }\r\n        }\r\n      `,\r\n      variables: { title, content, userId },\r\n    });\r\n  }\r\n\r\n  likePost(postId: string) {\r\n    return this.apollo.mutate({\r\n      mutation: gql`\r\n        mutation ($postId: ID!) {\r\n          likePost(postId: $postId) {\r\n            id\r\n            likes\r\n          }\r\n        }\r\n      `,\r\n      variables: { postId },\r\n    });\r\n  }\r\n\r\n  dislikePost(postId: string) {\r\n    return this.apollo.mutate({\r\n      mutation: gql`\r\n        mutation ($postId: ID!) {\r\n          dislikePost(postId: $postId) {\r\n            id\r\n            dislikes\r\n          }\r\n        }\r\n      `,\r\n      variables: { postId },\r\n    });\r\n  }\r\n}\r\n"],"mappings":";AAAA;AACA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,MAAM,EAAEC,GAAG,QAAQ,gBAAgB;AAMrC,IAAMC,WAAW,GAAjB,MAAMA,WAAW;EACFC,MAAA;EAApBC,YAAoBD,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;EAAW;EAErCE,QAAQA,CAAA;IACN,OAAO,IAAI,CAACF,MAAM,CAACG,KAAK,CAAC;MACvBA,KAAK,EAAEL,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;OA0BT;MAACM,WAAW,EAAE;KAChB,CAAC;EACJ;EAEAC,OAAOA,CAACC,KAAa,EAAEC,OAAe,EAAEC,MAAwB;IAC9D,OAAO,IAAI,CAACR,MAAM,CAACS,MAAM,CAAC;MACxBC,QAAQ,EAAEZ,GAAG;;;;;;;OAOZ;MACDa,SAAS,EAAE;QAAEL,KAAK;QAAEC,OAAO;QAAEC;MAAM;KACpC,CAAC;EACJ;EAEAI,QAAQA,CAACC,MAAc;IACrB,OAAO,IAAI,CAACb,MAAM,CAACS,MAAM,CAAC;MACxBC,QAAQ,EAAEZ,GAAG;;;;;;;OAOZ;MACDa,SAAS,EAAE;QAAEE;MAAM;KACpB,CAAC;EACJ;EAEAC,WAAWA,CAACD,MAAc;IACxB,OAAO,IAAI,CAACb,MAAM,CAACS,MAAM,CAAC;MACxBC,QAAQ,EAAEZ,GAAG;;;;;;;OAOZ;MACDa,SAAS,EAAE;QAAEE;MAAM;KACpB,CAAC;EACJ;;;;;AA3EWd,WAAW,GAAAgB,UAAA,EAHvBnB,UAAU,CAAC;EACVoB,UAAU,EAAE;CACb,CAAC,C,EACWjB,WAAW,CA4EvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}