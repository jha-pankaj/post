{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./add-post.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./add-post.component.scss?ngResource\";\nimport { Component, inject, output } from '@angular/core';\nimport { PostService } from '../../services/post.service';\nimport { FormBuilder, ReactiveFormsModule, FormsModule, Validators } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { UserService } from '../../services/user.service';\nimport { MatSnackBar } from '@angular/material/snack-bar'; // Import SnackBar\nimport { AuthService } from '../../services/auth.service';\nimport { MatInputModule } from '@angular/material/input'; // For input fields\nimport { MatButtonModule } from '@angular/material/button'; // For buttons\nimport { MatCardModule } from '@angular/material/card'; // For cards\nimport { MatFormFieldModule } from '@angular/material/form-field'; // For form fields\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner'; // For loading spinner\nimport { MatSnackBarModule } from '@angular/material/snack-bar'; // For snack bars\nimport * as i0 from \"@angular/core\";\nlet AddPostComponent = class AddPostComponent {\n  postService;\n  userService;\n  fb;\n  snackBar;\n  loading = false;\n  postForm;\n  onPostSuccess = output();\n  authService = inject(AuthService);\n  constructor(postService, userService, fb, snackBar) {\n    this.postService = postService;\n    this.userService = userService;\n    this.fb = fb;\n    this.snackBar = snackBar;\n    this.postForm = this.fb.group({\n      title: ['', [Validators.required, Validators.minLength(1)]],\n      content: ['', [Validators.required, Validators.minLength(1)]]\n    });\n  }\n  get title() {\n    return this.postForm.get('title');\n  }\n  get content() {\n    return this.postForm.get('content');\n  }\n  onSubmit() {\n    if (this.postForm.invalid) {\n      return;\n    }\n    this.addPost();\n  }\n  addPost() {\n    this.loading = true;\n    this.postService.addPost(this.postForm.value.title, this.postForm.value.content, this.authService.userId()).subscribe(res => {\n      this.loading = false;\n      this.onPostSuccess.emit(\"success\");\n      window.scrollTo({\n        top: 0,\n        behavior: 'smooth'\n      });\n      this.postForm.reset();\n      this.snackBar.open('Post added successfully!', '', {\n        duration: 3000,\n        panelClass: ['success-snackbar']\n      });\n    }, er => {\n      this.loading = false;\n      this.snackBar.open('Error adding post. Please try again.', '', {\n        duration: 3000,\n        panelClass: ['error-snackbar']\n      });\n    });\n  }\n  static ctorParameters = () => [{\n    type: PostService\n  }, {\n    type: UserService\n  }, {\n    type: FormBuilder\n  }, {\n    type: MatSnackBar\n  }];\n  static propDecorators = {\n    onPostSuccess: [{\n      type: i0.Output,\n      args: [\"onPostSuccess\"]\n    }]\n  };\n};\nAddPostComponent = __decorate([Component({\n  selector: 'app-add-post',\n  imports: [CommonModule, ReactiveFormsModule, FormsModule, MatInputModule, MatButtonModule, MatCardModule, MatFormFieldModule, MatProgressSpinnerModule, MatSnackBarModule],\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], AddPostComponent);\nexport { AddPostComponent };","map":{"version":3,"names":["Component","inject","output","PostService","FormBuilder","ReactiveFormsModule","FormsModule","Validators","CommonModule","UserService","MatSnackBar","AuthService","MatInputModule","MatButtonModule","MatCardModule","MatFormFieldModule","MatProgressSpinnerModule","MatSnackBarModule","AddPostComponent","postService","userService","fb","snackBar","loading","postForm","onPostSuccess","authService","constructor","group","title","required","minLength","content","get","onSubmit","invalid","addPost","value","userId","subscribe","res","emit","window","scrollTo","top","behavior","reset","open","duration","panelClass","er","__decorate","selector","imports","template","__NG_CLI_RESOURCE__0"],"sources":["D:\\myWork\\posts\\post\\blog_GraphQl_nodejs_angular19\\blog-frontend\\src\\app\\components\\add-post\\add-post.component.ts"],"sourcesContent":["import { Component, inject, output } from '@angular/core';\r\nimport { PostService } from '../../services/post.service';\r\nimport {\r\n  FormBuilder,\r\n  ReactiveFormsModule,\r\n  FormsModule,\r\n  FormGroup,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { UserService } from '../../services/user.service';\r\nimport { MatSnackBar } from '@angular/material/snack-bar'; // Import SnackBar\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { MatInputModule } from '@angular/material/input'; // For input fields\r\nimport { MatButtonModule } from '@angular/material/button'; // For buttons\r\nimport { MatCardModule } from '@angular/material/card'; // For cards\r\nimport { MatFormFieldModule } from '@angular/material/form-field'; // For form fields\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner'; // For loading spinner\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar'; // For snack bars\r\n\r\n@Component({\r\n  selector: 'app-add-post',\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatFormFieldModule,\r\n    MatProgressSpinnerModule,\r\n    MatSnackBarModule,\r\n  ],\r\n  templateUrl: './add-post.component.html',\r\n  styleUrl: './add-post.component.scss',\r\n})\r\nexport class AddPostComponent {\r\n  loading = false;\r\n  postForm!: FormGroup;\r\n  onPostSuccess = output<string>();\r\n  authService = inject(AuthService);\r\n  constructor(\r\n    private postService: PostService,\r\n    private userService: UserService,\r\n    private fb: FormBuilder,\r\n\r\n    private snackBar: MatSnackBar\r\n  ) {\r\n    this.postForm = this.fb.group({\r\n      title: ['', [Validators.required, Validators.minLength(1)]],\r\n      content: ['', [Validators.required, Validators.minLength(1)]],\r\n    });\r\n  }\r\n  get title() {\r\n    return this.postForm.get('title');\r\n  }\r\n\r\n  get content() {\r\n    return this.postForm.get('content');\r\n  }\r\n  onSubmit() {\r\n    if (this.postForm.invalid) {\r\n      return;\r\n    }\r\n    this.addPost();\r\n  }\r\n\r\n  addPost() {\r\n    this.loading = true;\r\n    this.postService\r\n      .addPost(\r\n        this.postForm.value.title,\r\n        this.postForm.value.content,\r\n        this.authService.userId()\r\n      )\r\n      .subscribe(\r\n        (res) => {\r\n          this.loading = false;\r\n          this.onPostSuccess.emit(\"success\")\r\n          window.scrollTo({ top: 0, behavior: 'smooth' });\r\n          this.postForm.reset();\r\n          this.snackBar.open('Post added successfully!', '', {\r\n            duration: 3000,\r\n            panelClass: ['success-snackbar'],\r\n          });\r\n        },\r\n        (er: Error) => {\r\n          this.loading = false;\r\n          this.snackBar.open('Error adding post. Please try again.', '', {\r\n            duration: 3000,\r\n            panelClass: ['error-snackbar'],\r\n          });\r\n        }\r\n      );\r\n  }\r\n\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}