{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./login.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./login.component.scss?ngResource\";\nimport { Component, inject } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { FormBuilder, ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { UserService } from '../../services/user.service';\nimport { AuthService } from '../../services/auth.service';\nimport { Router, RouterLink } from '@angular/router';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nlet LoginComponent = class LoginComponent {\n  fb;\n  userService;\n  authService;\n  loginForm;\n  router = inject(Router);\n  constructor(fb, userService, authService) {\n    this.fb = fb;\n    this.userService = userService;\n    this.authService = authService;\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      name: ['', [Validators.required, Validators.minLength(3)]]\n    });\n  }\n  onSubmit() {\n    if (this.loginForm?.valid) {\n      console.log('Login successful', this.loginForm.value);\n      this.userService.getUserByEmail(this.loginForm.value.email).subscribe(res => {\n        console.log(\"bbbb\", res);\n        this.authService.login(res.data.userByEmail.name, res.data.userByEmail.email, res.data.userByEmail.id);\n        this.router.navigate(['/blog']);\n      }, error => {\n        console.log(\"error\");\n      });\n    }\n  }\n  static ctorParameters = () => [{\n    type: FormBuilder\n  }, {\n    type: UserService\n  }, {\n    type: AuthService\n  }];\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  imports: [CommonModule, ReactiveFormsModule, FormsModule, RouterLink, MatProgressSpinnerModule],\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"names":["Component","inject","Validators","FormBuilder","ReactiveFormsModule","FormsModule","CommonModule","UserService","AuthService","Router","RouterLink","MatProgressSpinnerModule","LoginComponent","fb","userService","authService","loginForm","router","constructor","group","email","required","name","minLength","onSubmit","valid","console","log","value","getUserByEmail","subscribe","res","login","data","userByEmail","id","navigate","error","__decorate","selector","imports","template","__NG_CLI_RESOURCE__0"],"sources":["D:\\myWork\\posts\\post\\blog_GraphQl_nodejs_angular19\\blog-frontend\\src\\app\\auth\\login\\login.component.ts"],"sourcesContent":["import { Component, inject } from '@angular/core';\r\nimport { FormGroup, Validators } from '@angular/forms';\r\nimport { FormBuilder, ReactiveFormsModule ,FormsModule  } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { UserService } from '../../services/user.service';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { Router, RouterLink } from '@angular/router';\r\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  imports: [CommonModule,ReactiveFormsModule,FormsModule,RouterLink,MatProgressSpinnerModule ],\r\n  templateUrl: './login.component.html',\r\n  styleUrl: './login.component.scss'\r\n})\r\nexport class LoginComponent {\r\n  loginForm!: FormGroup;\r\n  router = inject(Router);\r\n  constructor(private fb: FormBuilder ,private userService:UserService, private authService:AuthService) {\r\n    this.loginForm = this.fb.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      name: ['', [Validators.required, Validators.minLength(3)]],\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.loginForm?.valid) {\r\n      console.log('Login successful', this.loginForm.value);\r\n      this.userService.getUserByEmail(this.loginForm.value.email).subscribe((res) => {\r\n        console.log(\"bbbb\",res)\r\n        this.authService.login(res.data.userByEmail.name,res.data.userByEmail.email,res.data.userByEmail.id)\r\n        this.router.navigate(['/blog']);\r\n      },(error:Error)=>{\r\n        console.log(\"error\")\r\n      });\r\n    }\r\n  }\r\n}\r\n"],"mappings":";;;AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,eAAe;AACjD,SAAoBC,UAAU,QAAQ,gBAAgB;AACtD,SAASC,WAAW,EAAEC,mBAAmB,EAAEC,WAAW,QAAS,gBAAgB;AAC/E,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,WAAW,QAAQ,6BAA6B;AACzD,SAASC,WAAW,QAAQ,6BAA6B;AACzD,SAASC,MAAM,EAAEC,UAAU,QAAQ,iBAAiB;AACpD,SAAQC,wBAAwB,QAAO,oCAAoC;AAUpE,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAGLC,EAAA;EAAyBC,WAAA;EAAiCC,WAAA;EAF9EC,SAAS;EACTC,MAAM,GAAGhB,MAAM,CAACQ,MAAM,CAAC;EACvBS,YAAoBL,EAAe,EAAUC,WAAuB,EAAUC,WAAuB;IAAjF,KAAAF,EAAE,GAAFA,EAAE;IAAuB,KAAAC,WAAW,GAAXA,WAAW;IAAsB,KAAAC,WAAW,GAAXA,WAAW;IACvF,IAAI,CAACC,SAAS,GAAG,IAAI,CAACH,EAAE,CAACM,KAAK,CAAC;MAC7BC,KAAK,EAAE,CAAC,EAAE,EAAE,CAAClB,UAAU,CAACmB,QAAQ,EAAEnB,UAAU,CAACkB,KAAK,CAAC,CAAC;MACpDE,IAAI,EAAE,CAAC,EAAE,EAAE,CAACpB,UAAU,CAACmB,QAAQ,EAAEnB,UAAU,CAACqB,SAAS,CAAC,CAAC,CAAC,CAAC;KAC1D,CAAC;EACJ;EAEAC,QAAQA,CAAA;IACN,IAAI,IAAI,CAACR,SAAS,EAAES,KAAK,EAAE;MACzBC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAE,IAAI,CAACX,SAAS,CAACY,KAAK,CAAC;MACrD,IAAI,CAACd,WAAW,CAACe,cAAc,CAAC,IAAI,CAACb,SAAS,CAACY,KAAK,CAACR,KAAK,CAAC,CAACU,SAAS,CAAEC,GAAG,IAAI;QAC5EL,OAAO,CAACC,GAAG,CAAC,MAAM,EAACI,GAAG,CAAC;QACvB,IAAI,CAAChB,WAAW,CAACiB,KAAK,CAACD,GAAG,CAACE,IAAI,CAACC,WAAW,CAACZ,IAAI,EAACS,GAAG,CAACE,IAAI,CAACC,WAAW,CAACd,KAAK,EAACW,GAAG,CAACE,IAAI,CAACC,WAAW,CAACC,EAAE,CAAC;QACpG,IAAI,CAAClB,MAAM,CAACmB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;MACjC,CAAC,EAAEC,KAAW,IAAG;QACfX,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;MACtB,CAAC,CAAC;IACJ;EACF;;;;;;;;;AArBWf,cAAc,GAAA0B,UAAA,EAN1BtC,SAAS,CAAC;EACTuC,QAAQ,EAAE,WAAW;EACrBC,OAAO,EAAE,CAAClC,YAAY,EAACF,mBAAmB,EAACC,WAAW,EAACK,UAAU,EAACC,wBAAwB,CAAE;EAC5F8B,QAAA,EAAAC,oBAAqC;;CAEtC,CAAC,C,EACW9B,cAAc,CAsB1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}