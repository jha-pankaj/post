{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { computed, effect, Injectable, signal, PLATFORM_ID, Inject } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { isPlatformBrowser } from \"@angular/common\";\nconst USER_KEY = \"blog_user\";\nlet AuthService = class AuthService {\n  router;\n  platformId;\n  #userSignal = signal(null);\n  user = this.#userSignal.asReadonly();\n  isLoggedIn = computed(() => !!this.user());\n  userId = computed(() => this.user()?.id ? this.user()?.id : '');\n  isLogin = false;\n  constructor(router, platformId) {\n    this.router = router;\n    this.platformId = platformId;\n    this.getUserInfo();\n    effect(() => {});\n    this.getUserInfo();\n    console.log(\"init of AuthService\", this.user());\n  }\n  getUserInfo() {\n    if (isPlatformBrowser(this.platformId)) {\n      const json = localStorage.getItem(USER_KEY);\n      if (json) {\n        const user = JSON.parse(json);\n        this.isLogin = true;\n        this.#userSignal.set(user);\n        console.log(\" this.isLogin true\");\n      }\n    }\n  }\n  isLoginAuthenticated() {\n    return this.isLogin;\n  }\n  login(name, email, id) {\n    const user = {\n      name: name,\n      email: email,\n      id: id\n    };\n    this.#userSignal.set(user);\n    localStorage.setItem(USER_KEY, JSON.stringify(user));\n    this.isLogin = true;\n  }\n  logout() {\n    localStorage.removeItem(USER_KEY);\n    this.#userSignal.set(null);\n    //this.router.navigateByUrl(\"/login\");\n  }\n  static ctorParameters = () => [{\n    type: Router\n  }, {\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }];\n};\nAuthService = __decorate([Injectable({\n  providedIn: \"root\"\n})], AuthService);\nexport { AuthService };","map":{"version":3,"names":["computed","effect","Injectable","signal","PLATFORM_ID","Inject","Router","isPlatformBrowser","USER_KEY","AuthService","router","platformId","userSignal","user","asReadonly","isLoggedIn","userId","id","isLogin","constructor","getUserInfo","console","log","json","localStorage","getItem","JSON","parse","set","isLoginAuthenticated","login","name","email","setItem","stringify","logout","removeItem","args","__decorate","providedIn"],"sources":["D:\\myWork\\posts\\post\\blog_GraphQl_nodejs_angular19\\blog-frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import {\r\n  computed,\r\n  effect,\r\n  inject,\r\n  Injectable,\r\n  signal,\r\n  PLATFORM_ID,\r\n  Inject,\r\n} from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { User } from \"../models/user.model\";\r\nimport { isPlatformBrowser } from \"@angular/common\";\r\n\r\nconst USER_KEY = \"blog_user\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class AuthService {\r\n  #userSignal = signal<User | null>(null);\r\n  user = this.#userSignal.asReadonly();\r\n  isLoggedIn = computed(() => !!this.user());\r\n  userId = computed(() => this.user()?.id ? this.user()?.id :'')\r\n  isLogin = false;\r\n  constructor(\r\n    private router: Router,\r\n    @Inject(PLATFORM_ID) private platformId: Object\r\n  ) {\r\n    this.getUserInfo();\r\n    effect(() => {});\r\n    this.getUserInfo();\r\n    console.log(\"init of AuthService\",this.user())\r\n  }\r\n  getUserInfo() {\r\n      if (isPlatformBrowser(this.platformId)) {\r\n      const json = localStorage.getItem(USER_KEY);\r\n      if (json) {\r\n        const user = JSON.parse(json);\r\n        this.isLogin =true;\r\n        this.#userSignal.set(user);\r\n        console.log(\" this.isLogin true\")\r\n      }\r\n    }\r\n  }\r\n  isLoginAuthenticated(){\r\n    return this.isLogin;\r\n  }\r\n  login(name: string, email: string,id:string) {\r\n    const user: User = {\r\n      name: name,\r\n      email: email,\r\n      id:id\r\n    };\r\n    this.#userSignal.set(user);\r\n    localStorage.setItem(USER_KEY, JSON.stringify(user));\r\n    this.isLogin =true;\r\n    }\r\n  logout() {\r\n    localStorage.removeItem(USER_KEY);\r\n    this.#userSignal.set(null);\r\n    //this.router.navigateByUrl(\"/login\");\r\n  }\r\n}\r\n"],"mappings":";AAAA,SACEA,QAAQ,EACRC,MAAM,EAENC,UAAU,EACVC,MAAM,EACNC,WAAW,EACXC,MAAM,QACD,eAAe;AACtB,SAASC,MAAM,QAAQ,iBAAiB;AAExC,SAASC,iBAAiB,QAAQ,iBAAiB;AAEnD,MAAMC,QAAQ,GAAG,WAAW;AAKrB,IAAMC,WAAW,GAAjB,MAAMA,WAAW;EAOZC,MAAA;EACqBC,UAAA;EAP/B,CAAAC,UAAW,GAAGT,MAAM,CAAc,IAAI,CAAC;EACvCU,IAAI,GAAG,IAAI,CAAC,CAAAD,UAAW,CAACE,UAAU,EAAE;EACpCC,UAAU,GAAGf,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAACa,IAAI,EAAE,CAAC;EAC1CG,MAAM,GAAGhB,QAAQ,CAAC,MAAM,IAAI,CAACa,IAAI,EAAE,EAAEI,EAAE,GAAG,IAAI,CAACJ,IAAI,EAAE,EAAEI,EAAE,GAAE,EAAE,CAAC;EAC9DC,OAAO,GAAG,KAAK;EACfC,YACUT,MAAc,EACOC,UAAkB;IADvC,KAAAD,MAAM,GAANA,MAAM;IACe,KAAAC,UAAU,GAAVA,UAAU;IAEvC,IAAI,CAACS,WAAW,EAAE;IAClBnB,MAAM,CAAC,MAAK,CAAE,CAAC,CAAC;IAChB,IAAI,CAACmB,WAAW,EAAE;IAClBC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAC,IAAI,CAACT,IAAI,EAAE,CAAC;EAChD;EACAO,WAAWA,CAAA;IACP,IAAIb,iBAAiB,CAAC,IAAI,CAACI,UAAU,CAAC,EAAE;MACxC,MAAMY,IAAI,GAAGC,YAAY,CAACC,OAAO,CAACjB,QAAQ,CAAC;MAC3C,IAAIe,IAAI,EAAE;QACR,MAAMV,IAAI,GAAGa,IAAI,CAACC,KAAK,CAACJ,IAAI,CAAC;QAC7B,IAAI,CAACL,OAAO,GAAE,IAAI;QAClB,IAAI,CAAC,CAAAN,UAAW,CAACgB,GAAG,CAACf,IAAI,CAAC;QAC1BQ,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;MACnC;IACF;EACF;EACAO,oBAAoBA,CAAA;IAClB,OAAO,IAAI,CAACX,OAAO;EACrB;EACAY,KAAKA,CAACC,IAAY,EAAEC,KAAa,EAACf,EAAS;IACzC,MAAMJ,IAAI,GAAS;MACjBkB,IAAI,EAAEA,IAAI;MACVC,KAAK,EAAEA,KAAK;MACZf,EAAE,EAACA;KACJ;IACD,IAAI,CAAC,CAAAL,UAAW,CAACgB,GAAG,CAACf,IAAI,CAAC;IAC1BW,YAAY,CAACS,OAAO,CAACzB,QAAQ,EAAEkB,IAAI,CAACQ,SAAS,CAACrB,IAAI,CAAC,CAAC;IACpD,IAAI,CAACK,OAAO,GAAE,IAAI;EAClB;EACFiB,MAAMA,CAAA;IACJX,YAAY,CAACY,UAAU,CAAC5B,QAAQ,CAAC;IACjC,IAAI,CAAC,CAAAI,UAAW,CAACgB,GAAG,CAAC,IAAI,CAAC;IAC1B;EACF;;;;;;YAnCGvB,MAAM;MAAAgC,IAAA,GAACjC,WAAW;IAAA;EAAA,E;;AARVK,WAAW,GAAA6B,UAAA,EAHvBpC,UAAU,CAAC;EACVqC,UAAU,EAAE;CACb,CAAC,C,EACW9B,WAAW,CA4CvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}