{"ast":null,"code":"import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform, getSupportedInputTypes } from '@angular/cdk/platform';\nimport { AutofillMonitor, TextFieldModule } from '@angular/cdk/text-field';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, ElementRef, NgZone, isSignal, effect, booleanAttribute, Directive, Input, NgModule } from '@angular/core';\nimport { _IdGenerator } from '@angular/cdk/a11y';\nimport { NgControl, Validators, NgForm, FormGroupDirective } from '@angular/forms';\nimport { ErrorStateMatcher, _ErrorStateTracker, MatCommonModule } from '@angular/material/core';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nexport { MatError, MatFormField, MatHint, MatLabel, MatPrefix, MatSuffix } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n\n/** @docs-private */\nfunction getMatInputUnsupportedTypeError(type) {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = ['button', 'checkbox', 'file', 'hidden', 'image', 'radio', 'range', 'reset', 'submit'];\n/** Injection token that can be used to provide the default options for the input. */\nconst MAT_INPUT_CONFIG = new InjectionToken('MAT_INPUT_CONFIG');\nclass MatInput {\n  _elementRef = inject(ElementRef);\n  _platform = inject(Platform);\n  ngControl = inject(NgControl, {\n    optional: true,\n    self: true\n  });\n  _autofillMonitor = inject(AutofillMonitor);\n  _ngZone = inject(NgZone);\n  _formField = inject(MAT_FORM_FIELD, {\n    optional: true\n  });\n  _uid = inject(_IdGenerator).getId('mat-input-');\n  _previousNativeValue;\n  _inputValueAccessor;\n  _signalBasedValueAccessor;\n  _previousPlaceholder;\n  _errorStateTracker;\n  _webkitBlinkWheelListenerAttached = false;\n  _config = inject(MAT_INPUT_CONFIG, {\n    optional: true\n  });\n  /** `aria-describedby` IDs assigned by the form field. */\n  _formFieldDescribedBy;\n  /** Whether the component is being rendered on the server. */\n  _isServer;\n  /** Whether the component is a native html select. */\n  _isNativeSelect;\n  /** Whether the component is a textarea. */\n  _isTextarea;\n  /** Whether the input is inside of a form field. */\n  _isInFormField;\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused = false;\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  stateChanges = new Subject();\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType = 'mat-input';\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  _disabled = false;\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id() {\n    return this._id;\n  }\n  set id(value) {\n    this._id = value || this._uid;\n  }\n  _id;\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  placeholder;\n  /**\n   * Name of the input.\n   * @docs-private\n   */\n  name;\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get required() {\n    return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n  }\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n  }\n  _required;\n  /** Input type of the element. */\n  get type() {\n    return this._type;\n  }\n  set type(value) {\n    this._type = value || 'text';\n    this._validateType();\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n    this._ensureWheelDefaultBehavior();\n  }\n  _type = 'text';\n  /** An object used to control when error messages are shown. */\n  get errorStateMatcher() {\n    return this._errorStateTracker.matcher;\n  }\n  set errorStateMatcher(value) {\n    this._errorStateTracker.matcher = value;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  userAriaDescribedBy;\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get value() {\n    return this._signalBasedValueAccessor ? this._signalBasedValueAccessor.value() : this._inputValueAccessor.value;\n  }\n  set value(value) {\n    if (value !== this.value) {\n      if (this._signalBasedValueAccessor) {\n        this._signalBasedValueAccessor.value.set(value);\n      } else {\n        this._inputValueAccessor.value = value;\n      }\n      this.stateChanges.next();\n    }\n  }\n  /** Whether the element is readonly. */\n  get readonly() {\n    return this._readonly;\n  }\n  set readonly(value) {\n    this._readonly = coerceBooleanProperty(value);\n  }\n  _readonly = false;\n  /** Whether the input should remain interactive when it is disabled. */\n  disabledInteractive;\n  /** Whether the input is in an error state. */\n  get errorState() {\n    return this._errorStateTracker.errorState;\n  }\n  set errorState(value) {\n    this._errorStateTracker.errorState = value;\n  }\n  _neverEmptyInputTypes = ['date', 'datetime', 'datetime-local', 'month', 'time', 'week'].filter(t => getSupportedInputTypes().has(t));\n  constructor() {\n    const parentForm = inject(NgForm, {\n      optional: true\n    });\n    const parentFormGroup = inject(FormGroupDirective, {\n      optional: true\n    });\n    const defaultErrorStateMatcher = inject(ErrorStateMatcher);\n    const accessor = inject(MAT_INPUT_VALUE_ACCESSOR, {\n      optional: true,\n      self: true\n    });\n    const element = this._elementRef.nativeElement;\n    const nodeName = element.nodeName.toLowerCase();\n    if (accessor) {\n      if (isSignal(accessor.value)) {\n        this._signalBasedValueAccessor = accessor;\n      } else {\n        this._inputValueAccessor = accessor;\n      }\n    } else {\n      // If no input value accessor was explicitly specified, use the element as the input value\n      // accessor.\n      this._inputValueAccessor = element;\n    }\n    this._previousNativeValue = this.value;\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (this._platform.IOS) {\n      this._ngZone.runOutsideAngular(() => {\n        element.addEventListener('keyup', this._iOSKeyupListener);\n      });\n    }\n    this._errorStateTracker = new _ErrorStateTracker(defaultErrorStateMatcher, this.ngControl, parentFormGroup, parentForm, this.stateChanges);\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = nodeName === 'select';\n    this._isTextarea = nodeName === 'textarea';\n    this._isInFormField = !!this._formField;\n    this.disabledInteractive = this._config?.disabledInteractive || false;\n    if (this._isNativeSelect) {\n      this.controlType = element.multiple ? 'mat-native-select-multiple' : 'mat-native-select';\n    }\n    if (this._signalBasedValueAccessor) {\n      effect(() => {\n        // Read the value so the effect can register the dependency.\n        this._signalBasedValueAccessor.value();\n        this.stateChanges.next();\n      });\n    }\n  }\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n    if (this._platform.IOS) {\n      this._elementRef.nativeElement.removeEventListener('keyup', this._iOSKeyupListener);\n    }\n    if (this._webkitBlinkWheelListenerAttached) {\n      this._elementRef.nativeElement.removeEventListener('wheel', this._webkitBlinkWheelListener);\n    }\n  }\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n      // Since the input isn't a `ControlValueAccessor`, we don't have a good way of knowing when\n      // the disabled state has changed. We can't use the `ngControl.statusChanges`, because it\n      // won't fire if the input is disabled with `emitEvents = false`, despite the input becoming\n      // disabled.\n      if (this.ngControl.disabled !== null && this.ngControl.disabled !== this.disabled) {\n        this.disabled = this.ngControl.disabled;\n        this.stateChanges.next();\n      }\n    }\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n    // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n    // present or not depends on a query which is prone to \"changed after checked\" errors.\n    this._dirtyCheckPlaceholder();\n  }\n  /** Focuses the input. */\n  focus(options) {\n    this._elementRef.nativeElement.focus(options);\n  }\n  /** Refreshes the error state of the input. */\n  updateErrorState() {\n    this._errorStateTracker.updateErrorState();\n  }\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused) {\n    if (isFocused === this.focused) {\n      return;\n    }\n    if (!this._isNativeSelect && isFocused && this.disabled && this.disabledInteractive) {\n      const element = this._elementRef.nativeElement;\n      // Focusing an input that has text will cause all the text to be selected. Clear it since\n      // the user won't be able to change it. This is based on the internal implementation.\n      if (element.type === 'number') {\n        // setSelectionRange doesn't work on number inputs so it needs to be set briefly to text.\n        element.type = 'text';\n        element.setSelectionRange(0, 0);\n        element.type = 'number';\n      } else {\n        element.setSelectionRange(0, 0);\n      }\n    }\n    this.focused = isFocused;\n    this.stateChanges.next();\n  }\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n  /** Does some manual dirty checking on the native input `value` property. */\n  _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n  /** Does some manual dirty checking on the native input `placeholder` attribute. */\n  _dirtyCheckPlaceholder() {\n    const placeholder = this._getPlaceholder();\n    if (placeholder !== this._previousPlaceholder) {\n      const element = this._elementRef.nativeElement;\n      this._previousPlaceholder = placeholder;\n      placeholder ? element.setAttribute('placeholder', placeholder) : element.removeAttribute('placeholder');\n    }\n  }\n  /** Gets the current placeholder of the form field. */\n  _getPlaceholder() {\n    return this.placeholder || null;\n  }\n  /** Make sure the input is a supported type. */\n  _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n  /** Checks whether the input type is one of the types that are never empty. */\n  _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n  /** Checks whether the input is invalid based on the native validation. */\n  _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = this._elementRef.nativeElement.validity;\n    return validity && validity.badInput;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty() {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() && !this.autofilled;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat() {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement;\n      const firstOption = selectElement.options[0];\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty || !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused && !this.disabled || !this.empty;\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids) {\n    const element = this._elementRef.nativeElement;\n    const existingDescribedBy = element.getAttribute('aria-describedby');\n    let toAssign;\n    // In some cases there might be some `aria-describedby` IDs that were assigned directly,\n    // like by the `AriaDescriber` (see #30011). Attempt to preserve them by taking the previous\n    // attribute value and filtering out the IDs that came from the previous `setDescribedByIds`\n    // call. Note the `|| ids` here allows us to avoid duplicating IDs on the first render.\n    if (existingDescribedBy) {\n      const exclude = this._formFieldDescribedBy || ids;\n      toAssign = ids.concat(existingDescribedBy.split(' ').filter(id => id && !exclude.includes(id)));\n    } else {\n      toAssign = ids;\n    }\n    this._formFieldDescribedBy = ids;\n    if (toAssign.length) {\n      element.setAttribute('aria-describedby', toAssign.join(' '));\n    } else {\n      element.removeAttribute('aria-describedby');\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n  /** Whether the form control is a native select that is displayed inline. */\n  _isInlineSelect() {\n    const element = this._elementRef.nativeElement;\n    return this._isNativeSelect && (element.multiple || element.size > 1);\n  }\n  _iOSKeyupListener = event => {\n    const el = event.target;\n    // Note: We specifically check for 0, rather than `!el.selectionStart`, because the two\n    // indicate different things. If the value is 0, it means that the caret is at the start\n    // of the input, whereas a value of `null` means that the input doesn't support\n    // manipulating the selection range. Inputs that don't support setting the selection range\n    // will throw an error so we want to avoid calling `setSelectionRange` on them. See:\n    // https://html.spec.whatwg.org/multipage/input.html#do-not-apply\n    if (!el.value && el.selectionStart === 0 && el.selectionEnd === 0) {\n      // Note: Just setting `0, 0` doesn't fix the issue. Setting\n      // `1, 1` fixes it for the first time that you type text and\n      // then hold delete. Toggling to `1, 1` and then back to\n      // `0, 0` seems to completely fix it.\n      el.setSelectionRange(1, 1);\n      el.setSelectionRange(0, 0);\n    }\n  };\n  _webkitBlinkWheelListener = () => {\n    // This is a noop function and is used to enable mouse wheel input\n    // on number inputs\n    // on blink and webkit browsers.\n  };\n  /**\n   * In blink and webkit browsers a focused number input does not increment or decrement its value\n   * on mouse wheel interaction unless a wheel event listener is attached to it or one of its ancestors or a passive wheel listener is attached somewhere in the DOM.\n   * For example: Hitting a tooltip once enables the mouse wheel input for all number inputs as long as it exists.\n   * In order to get reliable and intuitive behavior we apply a wheel event on our own\n   * thus making sure increment and decrement by mouse wheel works every time.\n   * @docs-private\n   */\n  _ensureWheelDefaultBehavior() {\n    if (!this._webkitBlinkWheelListenerAttached && this._type === 'number' && (this._platform.BLINK || this._platform.WEBKIT)) {\n      this._ngZone.runOutsideAngular(() => {\n        this._elementRef.nativeElement.addEventListener('wheel', this._webkitBlinkWheelListener);\n      });\n      this._webkitBlinkWheelListenerAttached = true;\n    }\n    if (this._webkitBlinkWheelListenerAttached && this._type !== 'number') {\n      this._elementRef.nativeElement.removeEventListener('wheel', this._webkitBlinkWheelListener);\n      this._webkitBlinkWheelListenerAttached = true;\n    }\n  }\n  /** Gets the value to set on the `readonly` attribute. */\n  _getReadonlyAttribute() {\n    if (this._isNativeSelect) {\n      return null;\n    }\n    if (this.readonly || this.disabled && this.disabledInteractive) {\n      return 'true';\n    }\n    return null;\n  }\n  static ɵfac = function MatInput_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatInput)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatInput,\n    selectors: [[\"input\", \"matInput\", \"\"], [\"textarea\", \"matInput\", \"\"], [\"select\", \"matNativeControl\", \"\"], [\"input\", \"matNativeControl\", \"\"], [\"textarea\", \"matNativeControl\", \"\"]],\n    hostAttrs: [1, \"mat-mdc-input-element\"],\n    hostVars: 21,\n    hostBindings: function MatInput_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"focus\", function MatInput_focus_HostBindingHandler() {\n          return ctx._focusChanged(true);\n        })(\"blur\", function MatInput_blur_HostBindingHandler() {\n          return ctx._focusChanged(false);\n        })(\"input\", function MatInput_input_HostBindingHandler() {\n          return ctx._onInput();\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵhostProperty(\"id\", ctx.id)(\"disabled\", ctx.disabled && !ctx.disabledInteractive)(\"required\", ctx.required);\n        i0.ɵɵattribute(\"name\", ctx.name || null)(\"readonly\", ctx._getReadonlyAttribute())(\"aria-disabled\", ctx.disabled && ctx.disabledInteractive ? \"true\" : null)(\"aria-invalid\", ctx.empty && ctx.required ? null : ctx.errorState)(\"aria-required\", ctx.required)(\"id\", ctx.id);\n        i0.ɵɵclassProp(\"mat-input-server\", ctx._isServer)(\"mat-mdc-form-field-textarea-control\", ctx._isInFormField && ctx._isTextarea)(\"mat-mdc-form-field-input-control\", ctx._isInFormField)(\"mat-mdc-input-disabled-interactive\", ctx.disabledInteractive)(\"mdc-text-field__input\", ctx._isInFormField)(\"mat-mdc-native-select-inline\", ctx._isInlineSelect());\n      }\n    },\n    inputs: {\n      disabled: \"disabled\",\n      id: \"id\",\n      placeholder: \"placeholder\",\n      name: \"name\",\n      required: \"required\",\n      type: \"type\",\n      errorStateMatcher: \"errorStateMatcher\",\n      userAriaDescribedBy: [0, \"aria-describedby\", \"userAriaDescribedBy\"],\n      value: \"value\",\n      readonly: \"readonly\",\n      disabledInteractive: [2, \"disabledInteractive\", \"disabledInteractive\", booleanAttribute]\n    },\n    exportAs: [\"matInput\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: MatFormFieldControl,\n      useExisting: MatInput\n    }]), i0.ɵɵInputTransformsFeature, i0.ɵɵNgOnChangesFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatInput, [{\n    type: Directive,\n    args: [{\n      selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n      exportAs: 'matInput',\n      host: {\n        'class': 'mat-mdc-input-element',\n        // The BaseMatInput parent class adds `mat-input-element`, `mat-form-field-control` and\n        // `mat-form-field-autofill-control` to the CSS class list, but this should not be added for\n        // this MDC equivalent input.\n        '[class.mat-input-server]': '_isServer',\n        '[class.mat-mdc-form-field-textarea-control]': '_isInFormField && _isTextarea',\n        '[class.mat-mdc-form-field-input-control]': '_isInFormField',\n        '[class.mat-mdc-input-disabled-interactive]': 'disabledInteractive',\n        '[class.mdc-text-field__input]': '_isInFormField',\n        '[class.mat-mdc-native-select-inline]': '_isInlineSelect()',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[id]': 'id',\n        '[disabled]': 'disabled && !disabledInteractive',\n        '[required]': 'required',\n        '[attr.name]': 'name || null',\n        '[attr.readonly]': '_getReadonlyAttribute()',\n        '[attr.aria-disabled]': 'disabled && disabledInteractive ? \"true\" : null',\n        // Only mark the input as invalid for assistive technology if it has a value since the\n        // state usually overlaps with `aria-required` when the input is empty and can be redundant.\n        '[attr.aria-invalid]': '(empty && required) ? null : errorState',\n        '[attr.aria-required]': 'required',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '(focus)': '_focusChanged(true)',\n        '(blur)': '_focusChanged(false)',\n        '(input)': '_onInput()'\n      },\n      providers: [{\n        provide: MatFormFieldControl,\n        useExisting: MatInput\n      }]\n    }]\n  }], () => [], {\n    disabled: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    errorStateMatcher: [{\n      type: Input\n    }],\n    userAriaDescribedBy: [{\n      type: Input,\n      args: ['aria-describedby']\n    }],\n    value: [{\n      type: Input\n    }],\n    readonly: [{\n      type: Input\n    }],\n    disabledInteractive: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }]\n  });\n})();\nclass MatInputModule {\n  static ɵfac = function MatInputModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatInputModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatInputModule,\n    imports: [MatCommonModule, MatFormFieldModule, MatInput],\n    exports: [MatInput, MatFormFieldModule, TextFieldModule, MatCommonModule]\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [MatCommonModule, MatFormFieldModule, MatFormFieldModule, TextFieldModule, MatCommonModule]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatInputModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule, MatFormFieldModule, MatInput],\n      exports: [MatInput, MatFormFieldModule, TextFieldModule, MatCommonModule]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_INPUT_CONFIG, MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, getMatInputUnsupportedTypeError };","map":{"version":3,"names":["coerceBooleanProperty","Platform","getSupportedInputTypes","AutofillMonitor","TextFieldModule","i0","InjectionToken","inject","ElementRef","NgZone","isSignal","effect","booleanAttribute","Directive","Input","NgModule","_IdGenerator","NgControl","Validators","NgForm","FormGroupDirective","ErrorStateMatcher","_ErrorStateTracker","MatCommonModule","MAT_FORM_FIELD","MatFormFieldControl","MatFormFieldModule","MatError","MatFormField","MatHint","MatLabel","MatPrefix","MatSuffix","Subject","getMatInputUnsupportedTypeError","type","Error","MAT_INPUT_VALUE_ACCESSOR","MAT_INPUT_INVALID_TYPES","MAT_INPUT_CONFIG","MatInput","_elementRef","_platform","ngControl","optional","self","_autofillMonitor","_ngZone","_formField","_uid","getId","_previousNativeValue","_inputValueAccessor","_signalBasedValueAccessor","_previousPlaceholder","_errorStateTracker","_webkitBlinkWheelListenerAttached","_config","_formFieldDescribedBy","_isServer","_isNativeSelect","_isTextarea","_isInFormField","focused","stateChanges","controlType","autofilled","disabled","_disabled","value","next","id","_id","placeholder","name","required","_required","control","hasValidator","_type","_validateType","has","nativeElement","_ensureWheelDefaultBehavior","errorStateMatcher","matcher","userAriaDescribedBy","set","readonly","_readonly","disabledInteractive","errorState","_neverEmptyInputTypes","filter","t","constructor","parentForm","parentFormGroup","defaultErrorStateMatcher","accessor","element","nodeName","toLowerCase","IOS","runOutsideAngular","addEventListener","_iOSKeyupListener","isBrowser","multiple","ngAfterViewInit","monitor","subscribe","event","isAutofilled","ngOnChanges","ngOnDestroy","complete","stopMonitoring","removeEventListener","_webkitBlinkWheelListener","ngDoCheck","updateErrorState","_dirtyCheckNativeValue","_dirtyCheckPlaceholder","focus","options","_focusChanged","isFocused","setSelectionRange","_onInput","newValue","_getPlaceholder","setAttribute","removeAttribute","indexOf","ngDevMode","_isNeverEmpty","_isBadInput","validity","badInput","empty","shouldLabelFloat","selectElement","firstOption","selectedIndex","label","setDescribedByIds","ids","existingDescribedBy","getAttribute","toAssign","exclude","concat","split","includes","length","join","onContainerClick","_isInlineSelect","size","el","target","selectionStart","selectionEnd","BLINK","WEBKIT","_getReadonlyAttribute","ɵfac","MatInput_Factory","__ngFactoryType__","ɵdir","ɵɵdefineDirective","selectors","hostAttrs","hostVars","hostBindings","MatInput_HostBindings","rf","ctx","ɵɵlistener","MatInput_focus_HostBindingHandler","MatInput_blur_HostBindingHandler","MatInput_input_HostBindingHandler","ɵɵhostProperty","ɵɵattribute","ɵɵclassProp","inputs","exportAs","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInputTransformsFeature","ɵɵNgOnChangesFeature","ɵsetClassMetadata","args","selector","host","providers","transform","MatInputModule","MatInputModule_Factory","ɵmod","ɵɵdefineNgModule","imports","exports","ɵinj","ɵɵdefineInjector"],"sources":["D:/myWork/posts/post/blog_GraphQl_nodejs_angular19/blog-frontend/node_modules/@angular/material/fesm2022/input.mjs"],"sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform, getSupportedInputTypes } from '@angular/cdk/platform';\nimport { AutofillMonitor, TextFieldModule } from '@angular/cdk/text-field';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, ElementRef, NgZone, isSignal, effect, booleanAttribute, Directive, Input, NgModule } from '@angular/core';\nimport { _IdGenerator } from '@angular/cdk/a11y';\nimport { NgControl, Validators, NgForm, FormGroupDirective } from '@angular/forms';\nimport { ErrorStateMatcher, _ErrorStateTracker, MatCommonModule } from '@angular/material/core';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nexport { MatError, MatFormField, MatHint, MatLabel, MatPrefix, MatSuffix } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n\n/** @docs-private */\nfunction getMatInputUnsupportedTypeError(type) {\n    return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit',\n];\n/** Injection token that can be used to provide the default options for the input. */\nconst MAT_INPUT_CONFIG = new InjectionToken('MAT_INPUT_CONFIG');\nclass MatInput {\n    _elementRef = inject(ElementRef);\n    _platform = inject(Platform);\n    ngControl = inject(NgControl, { optional: true, self: true });\n    _autofillMonitor = inject(AutofillMonitor);\n    _ngZone = inject(NgZone);\n    _formField = inject(MAT_FORM_FIELD, { optional: true });\n    _uid = inject(_IdGenerator).getId('mat-input-');\n    _previousNativeValue;\n    _inputValueAccessor;\n    _signalBasedValueAccessor;\n    _previousPlaceholder;\n    _errorStateTracker;\n    _webkitBlinkWheelListenerAttached = false;\n    _config = inject(MAT_INPUT_CONFIG, { optional: true });\n    /** `aria-describedby` IDs assigned by the form field. */\n    _formFieldDescribedBy;\n    /** Whether the component is being rendered on the server. */\n    _isServer;\n    /** Whether the component is a native html select. */\n    _isNativeSelect;\n    /** Whether the component is a textarea. */\n    _isTextarea;\n    /** Whether the input is inside of a form field. */\n    _isInFormField;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    focused = false;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    stateChanges = new Subject();\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    controlType = 'mat-input';\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    autofilled = false;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n    _disabled = false;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n    }\n    _id;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    placeholder;\n    /**\n     * Name of the input.\n     * @docs-private\n     */\n    name;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() {\n        return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    _required;\n    /** Input type of the element. */\n    get type() {\n        return this._type;\n    }\n    set type(value) {\n        this._type = value || 'text';\n        this._validateType();\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n        this._ensureWheelDefaultBehavior();\n    }\n    _type = 'text';\n    /** An object used to control when error messages are shown. */\n    get errorStateMatcher() {\n        return this._errorStateTracker.matcher;\n    }\n    set errorStateMatcher(value) {\n        this._errorStateTracker.matcher = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    userAriaDescribedBy;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() {\n        return this._signalBasedValueAccessor\n            ? this._signalBasedValueAccessor.value()\n            : this._inputValueAccessor.value;\n    }\n    set value(value) {\n        if (value !== this.value) {\n            if (this._signalBasedValueAccessor) {\n                this._signalBasedValueAccessor.value.set(value);\n            }\n            else {\n                this._inputValueAccessor.value = value;\n            }\n            this.stateChanges.next();\n        }\n    }\n    /** Whether the element is readonly. */\n    get readonly() {\n        return this._readonly;\n    }\n    set readonly(value) {\n        this._readonly = coerceBooleanProperty(value);\n    }\n    _readonly = false;\n    /** Whether the input should remain interactive when it is disabled. */\n    disabledInteractive;\n    /** Whether the input is in an error state. */\n    get errorState() {\n        return this._errorStateTracker.errorState;\n    }\n    set errorState(value) {\n        this._errorStateTracker.errorState = value;\n    }\n    _neverEmptyInputTypes = [\n        'date',\n        'datetime',\n        'datetime-local',\n        'month',\n        'time',\n        'week',\n    ].filter(t => getSupportedInputTypes().has(t));\n    constructor() {\n        const parentForm = inject(NgForm, { optional: true });\n        const parentFormGroup = inject(FormGroupDirective, { optional: true });\n        const defaultErrorStateMatcher = inject(ErrorStateMatcher);\n        const accessor = inject(MAT_INPUT_VALUE_ACCESSOR, { optional: true, self: true });\n        const element = this._elementRef.nativeElement;\n        const nodeName = element.nodeName.toLowerCase();\n        if (accessor) {\n            if (isSignal(accessor.value)) {\n                this._signalBasedValueAccessor = accessor;\n            }\n            else {\n                this._inputValueAccessor = accessor;\n            }\n        }\n        else {\n            // If no input value accessor was explicitly specified, use the element as the input value\n            // accessor.\n            this._inputValueAccessor = element;\n        }\n        this._previousNativeValue = this.value;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n        // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n        // exists on iOS, we only bother to install the listener on iOS.\n        if (this._platform.IOS) {\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('keyup', this._iOSKeyupListener);\n            });\n        }\n        this._errorStateTracker = new _ErrorStateTracker(defaultErrorStateMatcher, this.ngControl, parentFormGroup, parentForm, this.stateChanges);\n        this._isServer = !this._platform.isBrowser;\n        this._isNativeSelect = nodeName === 'select';\n        this._isTextarea = nodeName === 'textarea';\n        this._isInFormField = !!this._formField;\n        this.disabledInteractive = this._config?.disabledInteractive || false;\n        if (this._isNativeSelect) {\n            this.controlType = element.multiple\n                ? 'mat-native-select-multiple'\n                : 'mat-native-select';\n        }\n        if (this._signalBasedValueAccessor) {\n            effect(() => {\n                // Read the value so the effect can register the dependency.\n                this._signalBasedValueAccessor.value();\n                this.stateChanges.next();\n            });\n        }\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n                this.autofilled = event.isAutofilled;\n                this.stateChanges.next();\n            });\n        }\n    }\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n        if (this._platform.IOS) {\n            this._elementRef.nativeElement.removeEventListener('keyup', this._iOSKeyupListener);\n        }\n        if (this._webkitBlinkWheelListenerAttached) {\n            this._elementRef.nativeElement.removeEventListener('wheel', this._webkitBlinkWheelListener);\n        }\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n            // Since the input isn't a `ControlValueAccessor`, we don't have a good way of knowing when\n            // the disabled state has changed. We can't use the `ngControl.statusChanges`, because it\n            // won't fire if the input is disabled with `emitEvents = false`, despite the input becoming\n            // disabled.\n            if (this.ngControl.disabled !== null && this.ngControl.disabled !== this.disabled) {\n                this.disabled = this.ngControl.disabled;\n                this.stateChanges.next();\n            }\n        }\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n        // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n        // present or not depends on a query which is prone to \"changed after checked\" errors.\n        this._dirtyCheckPlaceholder();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Refreshes the error state of the input. */\n    updateErrorState() {\n        this._errorStateTracker.updateErrorState();\n    }\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused) {\n        if (isFocused === this.focused) {\n            return;\n        }\n        if (!this._isNativeSelect && isFocused && this.disabled && this.disabledInteractive) {\n            const element = this._elementRef.nativeElement;\n            // Focusing an input that has text will cause all the text to be selected. Clear it since\n            // the user won't be able to change it. This is based on the internal implementation.\n            if (element.type === 'number') {\n                // setSelectionRange doesn't work on number inputs so it needs to be set briefly to text.\n                element.type = 'text';\n                element.setSelectionRange(0, 0);\n                element.type = 'number';\n            }\n            else {\n                element.setSelectionRange(0, 0);\n            }\n        }\n        this.focused = isFocused;\n        this.stateChanges.next();\n    }\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /** Does some manual dirty checking on the native input `value` property. */\n    _dirtyCheckNativeValue() {\n        const newValue = this._elementRef.nativeElement.value;\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n    /** Does some manual dirty checking on the native input `placeholder` attribute. */\n    _dirtyCheckPlaceholder() {\n        const placeholder = this._getPlaceholder();\n        if (placeholder !== this._previousPlaceholder) {\n            const element = this._elementRef.nativeElement;\n            this._previousPlaceholder = placeholder;\n            placeholder\n                ? element.setAttribute('placeholder', placeholder)\n                : element.removeAttribute('placeholder');\n        }\n    }\n    /** Gets the current placeholder of the form field. */\n    _getPlaceholder() {\n        return this.placeholder || null;\n    }\n    /** Make sure the input is a supported type. */\n    _validateType() {\n        if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatInputUnsupportedTypeError(this._type);\n        }\n    }\n    /** Checks whether the input type is one of the types that are never empty. */\n    _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /** Checks whether the input is invalid based on the native validation. */\n    _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        let validity = this._elementRef.nativeElement.validity;\n        return validity && validity.badInput;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return (!this._isNeverEmpty() &&\n            !this._elementRef.nativeElement.value &&\n            !this._isBadInput() &&\n            !this.autofilled);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        if (this._isNativeSelect) {\n            // For a single-selection `<select>`, the label should float when the selected option has\n            // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n            // overlapping the label with the options.\n            const selectElement = this._elementRef.nativeElement;\n            const firstOption = selectElement.options[0];\n            // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n            // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n            return (this.focused ||\n                selectElement.multiple ||\n                !this.empty ||\n                !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label));\n        }\n        else {\n            return (this.focused && !this.disabled) || !this.empty;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        const element = this._elementRef.nativeElement;\n        const existingDescribedBy = element.getAttribute('aria-describedby');\n        let toAssign;\n        // In some cases there might be some `aria-describedby` IDs that were assigned directly,\n        // like by the `AriaDescriber` (see #30011). Attempt to preserve them by taking the previous\n        // attribute value and filtering out the IDs that came from the previous `setDescribedByIds`\n        // call. Note the `|| ids` here allows us to avoid duplicating IDs on the first render.\n        if (existingDescribedBy) {\n            const exclude = this._formFieldDescribedBy || ids;\n            toAssign = ids.concat(existingDescribedBy.split(' ').filter(id => id && !exclude.includes(id)));\n        }\n        else {\n            toAssign = ids;\n        }\n        this._formFieldDescribedBy = ids;\n        if (toAssign.length) {\n            element.setAttribute('aria-describedby', toAssign.join(' '));\n        }\n        else {\n            element.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n        // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n        // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n        if (!this.focused) {\n            this.focus();\n        }\n    }\n    /** Whether the form control is a native select that is displayed inline. */\n    _isInlineSelect() {\n        const element = this._elementRef.nativeElement;\n        return this._isNativeSelect && (element.multiple || element.size > 1);\n    }\n    _iOSKeyupListener = (event) => {\n        const el = event.target;\n        // Note: We specifically check for 0, rather than `!el.selectionStart`, because the two\n        // indicate different things. If the value is 0, it means that the caret is at the start\n        // of the input, whereas a value of `null` means that the input doesn't support\n        // manipulating the selection range. Inputs that don't support setting the selection range\n        // will throw an error so we want to avoid calling `setSelectionRange` on them. See:\n        // https://html.spec.whatwg.org/multipage/input.html#do-not-apply\n        if (!el.value && el.selectionStart === 0 && el.selectionEnd === 0) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n        }\n    };\n    _webkitBlinkWheelListener = () => {\n        // This is a noop function and is used to enable mouse wheel input\n        // on number inputs\n        // on blink and webkit browsers.\n    };\n    /**\n     * In blink and webkit browsers a focused number input does not increment or decrement its value\n     * on mouse wheel interaction unless a wheel event listener is attached to it or one of its ancestors or a passive wheel listener is attached somewhere in the DOM.\n     * For example: Hitting a tooltip once enables the mouse wheel input for all number inputs as long as it exists.\n     * In order to get reliable and intuitive behavior we apply a wheel event on our own\n     * thus making sure increment and decrement by mouse wheel works every time.\n     * @docs-private\n     */\n    _ensureWheelDefaultBehavior() {\n        if (!this._webkitBlinkWheelListenerAttached &&\n            this._type === 'number' &&\n            (this._platform.BLINK || this._platform.WEBKIT)) {\n            this._ngZone.runOutsideAngular(() => {\n                this._elementRef.nativeElement.addEventListener('wheel', this._webkitBlinkWheelListener);\n            });\n            this._webkitBlinkWheelListenerAttached = true;\n        }\n        if (this._webkitBlinkWheelListenerAttached && this._type !== 'number') {\n            this._elementRef.nativeElement.removeEventListener('wheel', this._webkitBlinkWheelListener);\n            this._webkitBlinkWheelListenerAttached = true;\n        }\n    }\n    /** Gets the value to set on the `readonly` attribute. */\n    _getReadonlyAttribute() {\n        if (this._isNativeSelect) {\n            return null;\n        }\n        if (this.readonly || (this.disabled && this.disabledInteractive)) {\n            return 'true';\n        }\n        return null;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatInput, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.0.0\", type: MatInput, isStandalone: true, selector: \"input[matInput], textarea[matInput], select[matNativeControl],\\n      input[matNativeControl], textarea[matNativeControl]\", inputs: { disabled: \"disabled\", id: \"id\", placeholder: \"placeholder\", name: \"name\", required: \"required\", type: \"type\", errorStateMatcher: \"errorStateMatcher\", userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"], value: \"value\", readonly: \"readonly\", disabledInteractive: [\"disabledInteractive\", \"disabledInteractive\", booleanAttribute] }, host: { listeners: { \"focus\": \"_focusChanged(true)\", \"blur\": \"_focusChanged(false)\", \"input\": \"_onInput()\" }, properties: { \"class.mat-input-server\": \"_isServer\", \"class.mat-mdc-form-field-textarea-control\": \"_isInFormField && _isTextarea\", \"class.mat-mdc-form-field-input-control\": \"_isInFormField\", \"class.mat-mdc-input-disabled-interactive\": \"disabledInteractive\", \"class.mdc-text-field__input\": \"_isInFormField\", \"class.mat-mdc-native-select-inline\": \"_isInlineSelect()\", \"id\": \"id\", \"disabled\": \"disabled && !disabledInteractive\", \"required\": \"required\", \"attr.name\": \"name || null\", \"attr.readonly\": \"_getReadonlyAttribute()\", \"attr.aria-disabled\": \"disabled && disabledInteractive ? \\\"true\\\" : null\", \"attr.aria-invalid\": \"(empty && required) ? null : errorState\", \"attr.aria-required\": \"required\", \"attr.id\": \"id\" }, classAttribute: \"mat-mdc-input-element\" }, providers: [{ provide: MatFormFieldControl, useExisting: MatInput }], exportAs: [\"matInput\"], usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatInput, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n                    exportAs: 'matInput',\n                    host: {\n                        'class': 'mat-mdc-input-element',\n                        // The BaseMatInput parent class adds `mat-input-element`, `mat-form-field-control` and\n                        // `mat-form-field-autofill-control` to the CSS class list, but this should not be added for\n                        // this MDC equivalent input.\n                        '[class.mat-input-server]': '_isServer',\n                        '[class.mat-mdc-form-field-textarea-control]': '_isInFormField && _isTextarea',\n                        '[class.mat-mdc-form-field-input-control]': '_isInFormField',\n                        '[class.mat-mdc-input-disabled-interactive]': 'disabledInteractive',\n                        '[class.mdc-text-field__input]': '_isInFormField',\n                        '[class.mat-mdc-native-select-inline]': '_isInlineSelect()',\n                        // Native input properties that are overwritten by Angular inputs need to be synced with\n                        // the native input element. Otherwise property bindings for those don't work.\n                        '[id]': 'id',\n                        '[disabled]': 'disabled && !disabledInteractive',\n                        '[required]': 'required',\n                        '[attr.name]': 'name || null',\n                        '[attr.readonly]': '_getReadonlyAttribute()',\n                        '[attr.aria-disabled]': 'disabled && disabledInteractive ? \"true\" : null',\n                        // Only mark the input as invalid for assistive technology if it has a value since the\n                        // state usually overlaps with `aria-required` when the input is empty and can be redundant.\n                        '[attr.aria-invalid]': '(empty && required) ? null : errorState',\n                        '[attr.aria-required]': 'required',\n                        // Native input properties that are overwritten by Angular inputs need to be synced with\n                        // the native input element. Otherwise property bindings for those don't work.\n                        '[attr.id]': 'id',\n                        '(focus)': '_focusChanged(true)',\n                        '(blur)': '_focusChanged(false)',\n                        '(input)': '_onInput()',\n                    },\n                    providers: [{ provide: MatFormFieldControl, useExisting: MatInput }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { disabled: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], errorStateMatcher: [{\n                type: Input\n            }], userAriaDescribedBy: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], value: [{\n                type: Input\n            }], readonly: [{\n                type: Input\n            }], disabledInteractive: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\nclass MatInputModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.0.0\", ngImport: i0, type: MatInputModule, imports: [MatCommonModule, MatFormFieldModule, MatInput], exports: [MatInput, MatFormFieldModule, TextFieldModule, MatCommonModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatInputModule, imports: [MatCommonModule, MatFormFieldModule, MatFormFieldModule, TextFieldModule, MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatInputModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatFormFieldModule, MatInput],\n                    exports: [MatInput, MatFormFieldModule, TextFieldModule, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_INPUT_CONFIG, MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, getMatInputUnsupportedTypeError };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}