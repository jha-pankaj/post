{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./post-list.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./post-list.component.scss?ngResource\";\nimport { Component } from '@angular/core';\nimport { PostService } from '../../services/post.service';\nimport { CommonModule } from '@angular/common';\nimport { Apollo } from 'apollo-angular';\nimport { CommentService } from '../../services/comment.service';\nimport { AuthService } from '../../services/auth.service';\nimport { AddPostComponent } from '../add-post/add-post.component';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nlet PostListComponent = class PostListComponent {\n  postService;\n  apollo;\n  commentService;\n  authService;\n  posts = [];\n  loading = false;\n  constructor(postService, apollo, commentService, authService) {\n    this.postService = postService;\n    this.apollo = apollo;\n    this.commentService = commentService;\n    this.authService = authService;\n  }\n  ngOnInit() {\n    this.getPosts();\n  }\n  getPosts() {\n    this.loading = true;\n    const post$ = this.postService.getPosts().subscribe(result => {\n      this.loading = false;\n      this.posts = result.data.posts.map(post => {\n        return {\n          ...post,\n          // Spread the post properties into a new object\n          comments: [...post.comments].sort((a, b) => {\n            return Number(b.createdAt) - Number(a.createdAt); // Sort comments\n          })\n        };\n      }).sort((a, b) => {\n        return Number(b.createdAt) - Number(a.createdAt); // Sort posts\n      });\n    });\n  }\n  onPostSuccess(ev) {\n    this.getPosts();\n  }\n  like(postId) {\n    this.loading = true;\n    this.postService.likePost(postId).subscribe(() => this.ngOnInit());\n  }\n  dislike(postId) {\n    this.loading = true;\n    this.postService.dislikePost(postId).subscribe(() => this.ngOnInit());\n  }\n  addComment(comment, postId) {\n    const uid = this.authService.userId();\n    console.log(uid);\n    this.loading = true;\n    this.commentService.addComment(comment, uid, postId).subscribe(result => {\n      console.log(\"add comments\");\n      this.getPosts();\n    });\n  }\n  static ctorParameters = () => [{\n    type: PostService\n  }, {\n    type: Apollo\n  }, {\n    type: CommentService\n  }, {\n    type: AuthService\n  }];\n};\nPostListComponent = __decorate([Component({\n  selector: 'app-post-list',\n  imports: [CommonModule, AddPostComponent, MatProgressSpinnerModule],\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], PostListComponent);\nexport { PostListComponent };","map":{"version":3,"names":["Component","PostService","CommonModule","Apollo","CommentService","AuthService","AddPostComponent","MatProgressSpinnerModule","PostListComponent","postService","apollo","commentService","authService","posts","loading","constructor","ngOnInit","getPosts","post$","subscribe","result","data","map","post","comments","sort","a","b","Number","createdAt","onPostSuccess","ev","like","postId","likePost","dislike","dislikePost","addComment","comment","uid","userId","console","log","__decorate","selector","imports","template","__NG_CLI_RESOURCE__0"],"sources":["D:\\myWork\\posts\\post\\blog_GraphQl_nodejs_angular19\\blog-frontend\\src\\app\\components\\post-list\\post-list.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { PostService } from '../../services/post.service';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Apollo, gql } from 'apollo-angular';\r\nimport { CommentService } from '../../services/comment.service';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { AddPostComponent } from '../add-post/add-post.component';\r\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\r\n\r\n\r\n@Component({\r\n  selector: 'app-post-list',\r\n  imports: [CommonModule,AddPostComponent,MatProgressSpinnerModule],\r\n  templateUrl: './post-list.component.html',\r\n  styleUrl: './post-list.component.scss'\r\n})\r\nexport class PostListComponent implements OnInit {\r\n  posts: any[] = [];\r\n  loading = false;\r\n  constructor(private postService: PostService,\r\n    private apollo: Apollo,\r\n     private commentService: CommentService,\r\n    private authService :AuthService\r\n    ) {}\r\n\r\n  ngOnInit() {\r\n\r\n    this.getPosts();\r\n\r\n  }\r\n  getPosts(){\r\n    this.loading = true;\r\n     const post$= this.postService.getPosts().subscribe((result: any) => {\r\n      this.loading = false;\r\n      this.posts = result.data.posts\r\n     \r\n      .map((post: any) => {\r\n        return {\r\n          ...post, // Spread the post properties into a new object\r\n          comments: [...post.comments].sort((a: any, b: any) => {\r\n            return Number(b.createdAt) - Number(a.createdAt); // Sort comments\r\n          }),\r\n        };\r\n      })\r\n      .sort((a: any, b: any) => {\r\n        return Number(b.createdAt) - Number(a.createdAt); // Sort posts\r\n      });\r\n    });\r\n\r\n  }\r\n  onPostSuccess(ev:string){\r\n    this.getPosts();\r\n  }\r\n\r\n  like(postId: string) {\r\n    this.loading = true;\r\n    this.postService.likePost(postId).subscribe(() => this.ngOnInit());\r\n  }\r\n\r\n  dislike(postId: string) {\r\n    this.loading = true;\r\n    this.postService.dislikePost(postId).subscribe(() => this.ngOnInit());\r\n  }\r\n  addComment(comment:string,postId:string){\r\n    const uid = this.authService.userId();\r\n    console.log(uid)\r\n    this.loading = true;\r\n    this.commentService.addComment(comment,uid,postId).subscribe((result: any) => {\r\n      console.log(\"add comments\")\r\n        this.getPosts();\r\n\r\n    });\r\n  }\r\n}\r\n"],"mappings":";;;AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAASC,WAAW,QAAQ,6BAA6B;AACzD,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,MAAM,QAAa,gBAAgB;AAC5C,SAASC,cAAc,QAAQ,gCAAgC;AAC/D,SAASC,WAAW,QAAQ,6BAA6B;AACzD,SAASC,gBAAgB,QAAQ,gCAAgC;AACjE,SAAQC,wBAAwB,QAAO,oCAAoC;AASpE,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAGRC,WAAA;EACVC,MAAA;EACCC,cAAA;EACDC,WAAA;EALVC,KAAK,GAAU,EAAE;EACjBC,OAAO,GAAG,KAAK;EACfC,YAAoBN,WAAwB,EAClCC,MAAc,EACbC,cAA8B,EAC/BC,WAAwB;IAHd,KAAAH,WAAW,GAAXA,WAAW;IACrB,KAAAC,MAAM,GAANA,MAAM;IACL,KAAAC,cAAc,GAAdA,cAAc;IACf,KAAAC,WAAW,GAAXA,WAAW;EAChB;EAELI,QAAQA,CAAA;IAEN,IAAI,CAACC,QAAQ,EAAE;EAEjB;EACAA,QAAQA,CAAA;IACN,IAAI,CAACH,OAAO,GAAG,IAAI;IAClB,MAAMI,KAAK,GAAE,IAAI,CAACT,WAAW,CAACQ,QAAQ,EAAE,CAACE,SAAS,CAAEC,MAAW,IAAI;MAClE,IAAI,CAACN,OAAO,GAAG,KAAK;MACpB,IAAI,CAACD,KAAK,GAAGO,MAAM,CAACC,IAAI,CAACR,KAAK,CAE7BS,GAAG,CAAEC,IAAS,IAAI;QACjB,OAAO;UACL,GAAGA,IAAI;UAAE;UACTC,QAAQ,EAAE,CAAC,GAAGD,IAAI,CAACC,QAAQ,CAAC,CAACC,IAAI,CAAC,CAACC,CAAM,EAAEC,CAAM,KAAI;YACnD,OAAOC,MAAM,CAACD,CAAC,CAACE,SAAS,CAAC,GAAGD,MAAM,CAACF,CAAC,CAACG,SAAS,CAAC,CAAC,CAAC;UACpD,CAAC;SACF;MACH,CAAC,CAAC,CACDJ,IAAI,CAAC,CAACC,CAAM,EAAEC,CAAM,KAAI;QACvB,OAAOC,MAAM,CAACD,CAAC,CAACE,SAAS,CAAC,GAAGD,MAAM,CAACF,CAAC,CAACG,SAAS,CAAC,CAAC,CAAC;MACpD,CAAC,CAAC;IACJ,CAAC,CAAC;EAEJ;EACAC,aAAaA,CAACC,EAAS;IACrB,IAAI,CAACd,QAAQ,EAAE;EACjB;EAEAe,IAAIA,CAACC,MAAc;IACjB,IAAI,CAACnB,OAAO,GAAG,IAAI;IACnB,IAAI,CAACL,WAAW,CAACyB,QAAQ,CAACD,MAAM,CAAC,CAACd,SAAS,CAAC,MAAM,IAAI,CAACH,QAAQ,EAAE,CAAC;EACpE;EAEAmB,OAAOA,CAACF,MAAc;IACpB,IAAI,CAACnB,OAAO,GAAG,IAAI;IACnB,IAAI,CAACL,WAAW,CAAC2B,WAAW,CAACH,MAAM,CAAC,CAACd,SAAS,CAAC,MAAM,IAAI,CAACH,QAAQ,EAAE,CAAC;EACvE;EACAqB,UAAUA,CAACC,OAAc,EAACL,MAAa;IACrC,MAAMM,GAAG,GAAG,IAAI,CAAC3B,WAAW,CAAC4B,MAAM,EAAE;IACrCC,OAAO,CAACC,GAAG,CAACH,GAAG,CAAC;IAChB,IAAI,CAACzB,OAAO,GAAG,IAAI;IACnB,IAAI,CAACH,cAAc,CAAC0B,UAAU,CAACC,OAAO,EAACC,GAAG,EAACN,MAAM,CAAC,CAACd,SAAS,CAAEC,MAAW,IAAI;MAC3EqB,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;MACzB,IAAI,CAACzB,QAAQ,EAAE;IAEnB,CAAC,CAAC;EACJ;;;;;;;;;;;AAxDWT,iBAAiB,GAAAmC,UAAA,EAN7B3C,SAAS,CAAC;EACT4C,QAAQ,EAAE,eAAe;EACzBC,OAAO,EAAE,CAAC3C,YAAY,EAACI,gBAAgB,EAACC,wBAAwB,CAAC;EACjEuC,QAAA,EAAAC,oBAAyC;;CAE1C,CAAC,C,EACWvC,iBAAiB,CAyD7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}