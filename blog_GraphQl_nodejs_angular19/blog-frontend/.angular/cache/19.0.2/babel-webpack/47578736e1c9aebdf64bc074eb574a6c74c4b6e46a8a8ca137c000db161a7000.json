{"ast":null,"code":"import { __decorate } from \"tslib\";\n// src/app/services/comment.service.ts\nimport { Injectable } from '@angular/core';\nimport { Apollo, gql } from 'apollo-angular';\nlet CommentService = class CommentService {\n  apollo;\n  constructor(apollo) {\n    this.apollo = apollo;\n  }\n  getComments(postId) {\n    return this.apollo.query({\n      query: gql`\n        query ($postId: ID!) {\n          comments(postId: $postId) {\n            id\n            content\n            user {\n              name\n            }\n            createdAt\n          }\n        }\n      `,\n      variables: {\n        postId\n      }\n    });\n  }\n  addComment(content, userId, postId) {\n    return this.apollo.mutate({\n      mutation: gql`\n        mutation ($content: String!, $userId: ID!, $postId: ID!) {\n          addComment(content: $content, userId: $userId, postId: $postId) {\n            id\n            content\n          }\n        }\n      `,\n      variables: {\n        content,\n        userId,\n        postId\n      }\n    });\n  }\n  static ctorParameters = () => [{\n    type: Apollo\n  }];\n};\nCommentService = __decorate([Injectable({\n  providedIn: 'root'\n})], CommentService);\nexport { CommentService };","map":{"version":3,"names":["Injectable","Apollo","gql","CommentService","apollo","constructor","getComments","postId","query","variables","addComment","content","userId","mutate","mutation","__decorate","providedIn"],"sources":["D:\\myWork\\posts\\post\\blog_GraphQl_nodejs_angular19\\blog-frontend\\src\\app\\services\\comment.service.ts"],"sourcesContent":["// src/app/services/comment.service.ts\r\nimport { Injectable } from '@angular/core';\r\nimport { Apollo, gql } from 'apollo-angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CommentService {\r\n  constructor(private apollo: Apollo) {}\r\n\r\n  getComments(postId: string) {\r\n    return this.apollo.query({\r\n      query: gql`\r\n        query ($postId: ID!) {\r\n          comments(postId: $postId) {\r\n            id\r\n            content\r\n            user {\r\n              name\r\n            }\r\n            createdAt\r\n          }\r\n        }\r\n      `,\r\n      variables: { postId },\r\n    });\r\n  }\r\n\r\n  addComment(content: string, userId: string | undefined, postId: string) {\r\n    return this.apollo.mutate({\r\n      mutation: gql`\r\n        mutation ($content: String!, $userId: ID!, $postId: ID!) {\r\n          addComment(content: $content, userId: $userId, postId: $postId) {\r\n            id\r\n            content\r\n          }\r\n        }\r\n      `,\r\n      variables: { content, userId, postId },\r\n    });\r\n  }\r\n}\r\n"],"mappings":";AAAA;AACA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,MAAM,EAAEC,GAAG,QAAQ,gBAAgB;AAKrC,IAAMC,cAAc,GAApB,MAAMA,cAAc;EACLC,MAAA;EAApBC,YAAoBD,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;EAAW;EAErCE,WAAWA,CAACC,MAAc;IACxB,OAAO,IAAI,CAACH,MAAM,CAACI,KAAK,CAAC;MACvBA,KAAK,EAAEN,GAAG;;;;;;;;;;;OAWT;MACDO,SAAS,EAAE;QAAEF;MAAM;KACpB,CAAC;EACJ;EAEAG,UAAUA,CAACC,OAAe,EAAEC,MAA0B,EAAEL,MAAc;IACpE,OAAO,IAAI,CAACH,MAAM,CAACS,MAAM,CAAC;MACxBC,QAAQ,EAAEZ,GAAG;;;;;;;OAOZ;MACDO,SAAS,EAAE;QAAEE,OAAO;QAAEC,MAAM;QAAEL;MAAM;KACrC,CAAC;EACJ;;;;;AAjCWJ,cAAc,GAAAY,UAAA,EAH1Bf,UAAU,CAAC;EACVgB,UAAU,EAAE;CACb,CAAC,C,EACWb,cAAc,CAkC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}