{"ast":null,"code":"import { __decorate } from \"tslib\";\n// src/app/services/user.service.ts\nimport { Injectable } from '@angular/core';\nimport { Apollo, gql } from 'apollo-angular';\nlet UserService = class UserService {\n  apollo;\n  constructor(apollo) {\n    this.apollo = apollo;\n  }\n  getUsers() {\n    return this.apollo.query({\n      query: gql`\n        query {\n          users {\n            id\n            name\n            email\n          }\n        }\n      `\n    });\n  }\n  getUserByEmail(email) {\n    const GET_USER_BY_EMAIL = gql`\n      query GetUserByEmail($email: String!) {\n        userByEmail(email: $email) {\n          id\n          name\n          email\n        }\n      }\n    `;\n    return this.apollo.query({\n      query: GET_USER_BY_EMAIL,\n      variables: {\n        email\n      }\n    });\n  }\n  addUser(name, email) {\n    return this.apollo.mutate({\n      mutation: gql`\n        mutation ($name: String!, $email: String!) {\n          addUser(name: $name, email: $email) {\n            id\n            name\n            email\n          }\n        }\n      `,\n      variables: {\n        name,\n        email\n      }\n    });\n  }\n  static ctorParameters = () => [{\n    type: Apollo\n  }];\n};\nUserService = __decorate([Injectable({\n  providedIn: 'root'\n})], UserService);\nexport { UserService };","map":{"version":3,"names":["Injectable","Apollo","gql","UserService","apollo","constructor","getUsers","query","getUserByEmail","email","GET_USER_BY_EMAIL","variables","addUser","name","mutate","mutation","__decorate","providedIn"],"sources":["D:\\myWork\\posts\\post\\blog_GraphQl_nodejs_angular19\\blog-frontend\\src\\app\\services\\user.service.ts"],"sourcesContent":["// src/app/services/user.service.ts\r\nimport { Injectable } from '@angular/core';\r\nimport { Apollo, gql } from 'apollo-angular';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserService {\r\n  constructor(private apollo: Apollo) {}\r\n\r\n  getUsers() :Observable<any>{\r\n    return this.apollo.query({\r\n      query: gql`\r\n        query {\r\n          users {\r\n            id\r\n            name\r\n            email\r\n          }\r\n        }\r\n      `,\r\n    });\r\n  }\r\n\r\n  getUserByEmail(email: string): Observable<any> {\r\n    const GET_USER_BY_EMAIL = gql`\r\n      query GetUserByEmail($email: String!) {\r\n        userByEmail(email: $email) {\r\n          id\r\n          name\r\n          email\r\n        }\r\n      }\r\n    `;\r\n\r\n    return this.apollo.query({\r\n      query: GET_USER_BY_EMAIL,\r\n      variables: { email },\r\n    });\r\n  }\r\n\r\n\r\n  addUser(name: string, email: string) {\r\n    return this.apollo.mutate({\r\n      mutation: gql`\r\n        mutation ($name: String!, $email: String!) {\r\n          addUser(name: $name, email: $email) {\r\n            id\r\n            name\r\n            email\r\n          }\r\n        }\r\n      `,\r\n      variables: { name, email },\r\n    });\r\n  }\r\n}\r\n"],"mappings":";AAAA;AACA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,MAAM,EAAEC,GAAG,QAAQ,gBAAgB;AAMrC,IAAMC,WAAW,GAAjB,MAAMA,WAAW;EACFC,MAAA;EAApBC,YAAoBD,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;EAAW;EAErCE,QAAQA,CAAA;IACN,OAAO,IAAI,CAACF,MAAM,CAACG,KAAK,CAAC;MACvBA,KAAK,EAAEL,GAAG;;;;;;;;;KASX,CAAC;EACJ;EAEAM,cAAcA,CAACC,KAAa;IAC1B,MAAMC,iBAAiB,GAAGR,GAAG;;;;;;;;KAQ5B;IAED,OAAO,IAAI,CAACE,MAAM,CAACG,KAAK,CAAC;MACvBA,KAAK,EAAEG,iBAAiB;MACxBC,SAAS,EAAE;QAAEF;MAAK;KACnB,CAAC;EACJ;EAGAG,OAAOA,CAACC,IAAY,EAAEJ,KAAa;IACjC,OAAO,IAAI,CAACL,MAAM,CAACU,MAAM,CAAC;MACxBC,QAAQ,EAAEb,GAAG;;;;;;;;OAQZ;MACDS,SAAS,EAAE;QAAEE,IAAI;QAAEJ;MAAK;KACzB,CAAC;EACJ;;;;;AAhDWN,WAAW,GAAAa,UAAA,EAHvBhB,UAAU,CAAC;EACViB,UAAU,EAAE;CACb,CAAC,C,EACWd,WAAW,CAiDvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}