{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, inject, ElementRef, ChangeDetectorRef, booleanAttribute, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, TemplateRef, ApplicationRef, Injector, ViewContainerRef, Directive, QueryList, EventEmitter, afterNextRender, ContentChildren, ViewChild, ContentChild, Output, NgZone, NgModule } from '@angular/core';\nimport { FocusMonitor, _IdGenerator, FocusKeyManager, isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { UP_ARROW, DOWN_ARROW, RIGHT_ARROW, LEFT_ARROW, ESCAPE, hasModifierKey, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { Subject, merge, Subscription, of, asapScheduler } from 'rxjs';\nimport { startWith, switchMap, takeUntil, filter, take, delay } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\nimport { _StructuralStylesLoader, MatRipple, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { _CdkPrivateStyleLoader } from '@angular/cdk/private';\nimport { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nconst _c0 = [\"mat-menu-item\", \"\"];\nconst _c1 = [[[\"mat-icon\"], [\"\", \"matMenuItemIcon\", \"\"]], \"*\"];\nconst _c2 = [\"mat-icon, [matMenuItemIcon]\", \"*\"];\nfunction MatMenuItem_Conditional_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 2);\n    i0.ɵɵelement(1, \"polygon\", 3);\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c3 = [\"*\"];\nfunction MatMenu_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 0);\n    i0.ɵɵlistener(\"click\", function MatMenu_ng_template_0_Template_div_click_0_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.closed.emit(\"click\"));\n    })(\"@transformMenu.start\", function MatMenu_ng_template_0_Template_div_animation_transformMenu_start_0_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1._onAnimationStart($event));\n    })(\"@transformMenu.done\", function MatMenu_ng_template_0_Template_div_animation_transformMenu_done_0_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1._onAnimationDone($event));\n    });\n    i0.ɵɵelementStart(1, \"div\", 1);\n    i0.ɵɵprojection(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r1._classList);\n    i0.ɵɵproperty(\"id\", ctx_r1.panelId)(\"@transformMenu\", ctx_r1._panelAnimationState);\n    i0.ɵɵattribute(\"aria-label\", ctx_r1.ariaLabel || null)(\"aria-labelledby\", ctx_r1.ariaLabelledby || null)(\"aria-describedby\", ctx_r1.ariaDescribedby || null);\n  }\n}\nconst MAT_MENU_PANEL = new InjectionToken('MAT_MENU_PANEL');\n\n/**\n * Single item inside a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\nclass MatMenuItem {\n  _elementRef = inject(ElementRef);\n  _document = inject(DOCUMENT);\n  _focusMonitor = inject(FocusMonitor);\n  _parentMenu = inject(MAT_MENU_PANEL, {\n    optional: true\n  });\n  _changeDetectorRef = inject(ChangeDetectorRef);\n  /** ARIA role for the menu item. */\n  role = 'menuitem';\n  /** Whether the menu item is disabled. */\n  disabled = false;\n  /** Whether ripples are disabled on the menu item. */\n  disableRipple = false;\n  /** Stream that emits when the menu item is hovered. */\n  _hovered = new Subject();\n  /** Stream that emits when the menu item is focused. */\n  _focused = new Subject();\n  /** Whether the menu item is highlighted. */\n  _highlighted = false;\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu = false;\n  constructor() {\n    inject(_CdkPrivateStyleLoader).load(_StructuralStylesLoader);\n    this._parentMenu?.addItem?.(this);\n  }\n  /** Focuses the menu item. */\n  focus(origin, options) {\n    if (this._focusMonitor && origin) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n    } else {\n      this._getHostElement().focus(options);\n    }\n    this._focused.next(this);\n  }\n  ngAfterViewInit() {\n    if (this._focusMonitor) {\n      // Start monitoring the element, so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      this._focusMonitor.monitor(this._elementRef, false);\n    }\n  }\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n    this._hovered.complete();\n    this._focused.complete();\n  }\n  /** Used to set the `tabindex`. */\n  _getTabIndex() {\n    return this.disabled ? '-1' : '0';\n  }\n  /** Returns the host DOM element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event) {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel() {\n    const clone = this._elementRef.nativeElement.cloneNode(true);\n    const icons = clone.querySelectorAll('mat-icon, .material-icons');\n    // Strip away icons, so they don't show up in the text.\n    for (let i = 0; i < icons.length; i++) {\n      icons[i].remove();\n    }\n    return clone.textContent?.trim() || '';\n  }\n  _setHighlighted(isHighlighted) {\n    // We need to mark this for check for the case where the content is coming from a\n    // `matMenuContent` whose change detection tree is at the declaration position,\n    // not the insertion position. See #23175.\n    this._highlighted = isHighlighted;\n    this._changeDetectorRef.markForCheck();\n  }\n  _setTriggersSubmenu(triggersSubmenu) {\n    this._triggersSubmenu = triggersSubmenu;\n    this._changeDetectorRef.markForCheck();\n  }\n  _hasFocus() {\n    return this._document && this._document.activeElement === this._getHostElement();\n  }\n  static ɵfac = function MatMenuItem_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatMenuItem)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatMenuItem,\n    selectors: [[\"\", \"mat-menu-item\", \"\"]],\n    hostAttrs: [1, \"mat-mdc-menu-item\", \"mat-focus-indicator\"],\n    hostVars: 8,\n    hostBindings: function MatMenuItem_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function MatMenuItem_click_HostBindingHandler($event) {\n          return ctx._checkDisabled($event);\n        })(\"mouseenter\", function MatMenuItem_mouseenter_HostBindingHandler() {\n          return ctx._handleMouseEnter();\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵattribute(\"role\", ctx.role)(\"tabindex\", ctx._getTabIndex())(\"aria-disabled\", ctx.disabled)(\"disabled\", ctx.disabled || null);\n        i0.ɵɵclassProp(\"mat-mdc-menu-item-highlighted\", ctx._highlighted)(\"mat-mdc-menu-item-submenu-trigger\", ctx._triggersSubmenu);\n      }\n    },\n    inputs: {\n      role: \"role\",\n      disabled: [2, \"disabled\", \"disabled\", booleanAttribute],\n      disableRipple: [2, \"disableRipple\", \"disableRipple\", booleanAttribute]\n    },\n    exportAs: [\"matMenuItem\"],\n    features: [i0.ɵɵInputTransformsFeature],\n    attrs: _c0,\n    ngContentSelectors: _c2,\n    decls: 5,\n    vars: 3,\n    consts: [[1, \"mat-mdc-menu-item-text\"], [\"matRipple\", \"\", 1, \"mat-mdc-menu-ripple\", 3, \"matRippleDisabled\", \"matRippleTrigger\"], [\"viewBox\", \"0 0 5 10\", \"focusable\", \"false\", \"aria-hidden\", \"true\", 1, \"mat-mdc-menu-submenu-icon\"], [\"points\", \"0,0 5,5 0,10\"]],\n    template: function MatMenuItem_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c1);\n        i0.ɵɵprojection(0);\n        i0.ɵɵelementStart(1, \"span\", 0);\n        i0.ɵɵprojection(2, 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(3, \"div\", 1);\n        i0.ɵɵtemplate(4, MatMenuItem_Conditional_4_Template, 2, 0, \":svg:svg\", 2);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleTrigger\", ctx._getHostElement());\n        i0.ɵɵadvance();\n        i0.ɵɵconditional(ctx._triggersSubmenu ? 4 : -1);\n      }\n    },\n    dependencies: [MatRipple],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatMenuItem, [{\n    type: Component,\n    args: [{\n      selector: '[mat-menu-item]',\n      exportAs: 'matMenuItem',\n      host: {\n        '[attr.role]': 'role',\n        'class': 'mat-mdc-menu-item mat-focus-indicator',\n        '[class.mat-mdc-menu-item-highlighted]': '_highlighted',\n        '[class.mat-mdc-menu-item-submenu-trigger]': '_triggersSubmenu',\n        '[attr.tabindex]': '_getTabIndex()',\n        '[attr.aria-disabled]': 'disabled',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': '_checkDisabled($event)',\n        '(mouseenter)': '_handleMouseEnter()'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      imports: [MatRipple],\n      template: \"<ng-content select=\\\"mat-icon, [matMenuItemIcon]\\\"></ng-content>\\n<span class=\\\"mat-mdc-menu-item-text\\\"><ng-content></ng-content></span>\\n<div class=\\\"mat-mdc-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n\\n@if (_triggersSubmenu) {\\n     <svg\\n       class=\\\"mat-mdc-menu-submenu-icon\\\"\\n       viewBox=\\\"0 0 5 10\\\"\\n       focusable=\\\"false\\\"\\n       aria-hidden=\\\"true\\\"><polygon points=\\\"0,0 5,5 0,10\\\"/></svg>\\n}\\n\"\n    }]\n  }], () => [], {\n    role: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    disableRipple: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }]\n  });\n})();\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when a menu is assigned\n * to a trigger that is placed inside the same menu.\n * @docs-private\n */\nfunction throwMatMenuRecursiveError() {\n  throw Error(`matMenuTriggerFor: menu cannot contain its own trigger. Assign a menu that is ` + `not a parent of the trigger or move the trigger outside of the menu.`);\n}\n\n/**\n * Injection token that can be used to reference instances of `MatMenuContent`. It serves\n * as alternative token to the actual `MatMenuContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_MENU_CONTENT = new InjectionToken('MatMenuContent');\n/** Menu content that will be rendered lazily once the menu is opened. */\nclass MatMenuContent {\n  _template = inject(TemplateRef);\n  _appRef = inject(ApplicationRef);\n  _injector = inject(Injector);\n  _viewContainerRef = inject(ViewContainerRef);\n  _document = inject(DOCUMENT);\n  _changeDetectorRef = inject(ChangeDetectorRef);\n  _portal;\n  _outlet;\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject();\n  constructor() {}\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n    this.detach();\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'), null, this._appRef, this._injector);\n    }\n    const element = this._template.elementRef.nativeElement;\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode.insertBefore(this._outlet.outletElement, element);\n    // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n    // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n    // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n    // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n    // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n    this._changeDetectorRef.markForCheck();\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n  static ɵfac = function MatMenuContent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatMenuContent)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatMenuContent,\n    selectors: [[\"ng-template\", \"matMenuContent\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: MAT_MENU_CONTENT,\n      useExisting: MatMenuContent\n    }])]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatMenuContent, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[matMenuContent]',\n      providers: [{\n        provide: MAT_MENU_CONTENT,\n        useExisting: MatMenuContent\n      }]\n    }]\n  }], () => [], null);\n})();\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nconst matMenuAnimations = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [state('void', style({\n    opacity: 0,\n    transform: 'scale(0.8)'\n  })), transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n    opacity: 1,\n    transform: 'scale(1)'\n  }))), transition('* => void', animate('100ms 25ms linear', style({\n    opacity: 0\n  })))]),\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n  // TODO(crisbeto): this is inside the `transformMenu`\n  // now. Remove next time we do breaking changes.\n  state('showing', style({\n    opacity: 1\n  })), transition('void => *', [style({\n    opacity: 0\n  }), animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')])])\n};\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst fadeInItems = matMenuAnimations.fadeInItems;\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst transformMenu = matMenuAnimations.transformMenu;\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nconst MAT_MENU_DEFAULT_OPTIONS = new InjectionToken('mat-menu-default-options', {\n  providedIn: 'root',\n  factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop'\n  };\n}\nclass MatMenu {\n  _elementRef = inject(ElementRef);\n  _changeDetectorRef = inject(ChangeDetectorRef);\n  _keyManager;\n  _xPosition;\n  _yPosition;\n  _firstItemFocusRef;\n  /** All items inside the menu. Includes items nested inside another menu. */\n  _allItems;\n  /** Only the direct descendant menu items. */\n  _directDescendantItems = new QueryList();\n  /** Classes to be applied to the menu panel. */\n  _classList = {};\n  /** Current state of the panel animation. */\n  _panelAnimationState = 'void';\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject();\n  /** Whether the menu is animating. */\n  _isAnimating;\n  /** Parent menu of the current menu panel. */\n  parentMenu;\n  /** Layout direction of the menu. */\n  direction;\n  /** Class or list of classes to be added to the overlay panel. */\n  overlayPanelClass;\n  /** Class to be added to the backdrop element. */\n  backdropClass;\n  /** aria-label for the menu panel. */\n  ariaLabel;\n  /** aria-labelledby for the menu panel. */\n  ariaLabelledby;\n  /** aria-describedby for the menu panel. */\n  ariaDescribedby;\n  /** Position of the menu in the X axis. */\n  get xPosition() {\n    return this._xPosition;\n  }\n  set xPosition(value) {\n    if (value !== 'before' && value !== 'after' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n  /** Position of the menu in the Y axis. */\n  get yPosition() {\n    return this._yPosition;\n  }\n  set yPosition(value) {\n    if (value !== 'above' && value !== 'below' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n  /** @docs-private */\n  templateRef;\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  items;\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  lazyContent;\n  /** Whether the menu should overlap its trigger. */\n  overlapTrigger;\n  /** Whether the menu has a backdrop. */\n  hasBackdrop;\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  set panelClass(classes) {\n    const previousPanelClass = this._previousPanelClass;\n    const newClassList = {\n      ...this._classList\n    };\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach(className => {\n        newClassList[className] = false;\n      });\n    }\n    this._previousPanelClass = classes;\n    if (classes && classes.length) {\n      classes.split(' ').forEach(className => {\n        newClassList[className] = true;\n      });\n      this._elementRef.nativeElement.className = '';\n    }\n    this._classList = newClassList;\n  }\n  _previousPanelClass;\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  get classList() {\n    return this.panelClass;\n  }\n  set classList(classes) {\n    this.panelClass = classes;\n  }\n  /** Event emitted when the menu is closed. */\n  closed = new EventEmitter();\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  close = this.closed;\n  panelId = inject(_IdGenerator).getId('mat-menu-panel-');\n  _injector = inject(Injector);\n  constructor() {\n    const defaultOptions = inject(MAT_MENU_DEFAULT_OPTIONS);\n    this.overlayPanelClass = defaultOptions.overlayPanelClass || '';\n    this._xPosition = defaultOptions.xPosition;\n    this._yPosition = defaultOptions.yPosition;\n    this.backdropClass = defaultOptions.backdropClass;\n    this.overlapTrigger = defaultOptions.overlapTrigger;\n    this.hasBackdrop = defaultOptions.hasBackdrop;\n  }\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n  ngAfterContentInit() {\n    this._updateDirectDescendants();\n    this._keyManager = new FocusKeyManager(this._directDescendantItems).withWrap().withTypeAhead().withHomeAndEnd();\n    this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n    // If a user manually (programmatically) focuses a menu item, we need to reflect that focus\n    // change back to the key manager. Note that we don't need to unsubscribe here because _focused\n    // is internal and we know that it gets completed on destroy.\n    this._directDescendantItems.changes.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map(item => item._focused)))).subscribe(focusedItem => this._keyManager.updateActiveItem(focusedItem));\n    this._directDescendantItems.changes.subscribe(itemsList => {\n      // Move focus to another item, if the active item is removed from the list.\n      // We need to debounce the callback, because multiple items might be removed\n      // in quick succession.\n      const manager = this._keyManager;\n      if (this._panelAnimationState === 'enter' && manager.activeItem?._hasFocus()) {\n        const items = itemsList.toArray();\n        const index = Math.max(0, Math.min(items.length - 1, manager.activeItemIndex || 0));\n        if (items[index] && !items[index].disabled) {\n          manager.setActiveItem(index);\n        } else {\n          manager.setNextItemActive();\n        }\n      }\n    });\n  }\n  ngOnDestroy() {\n    this._keyManager?.destroy();\n    this._directDescendantItems.destroy();\n    this.closed.complete();\n    this._firstItemFocusRef?.destroy();\n  }\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered() {\n    // Coerce the `changes` property because Angular types it as `Observable<any>`\n    const itemChanges = this._directDescendantItems.changes;\n    return itemChanges.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map(item => item._hovered))));\n  }\n  /*\n   * Registers a menu item with the menu.\n   * @docs-private\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 9.0.0\n   */\n  addItem(_item) {}\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 9.0.0\n   */\n  removeItem(_item) {}\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    switch (keyCode) {\n      case ESCAPE:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this.closed.emit('keydown');\n        }\n        break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n        break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n        break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          manager.setFocusOrigin('keyboard');\n        }\n        manager.onKeydown(event);\n        return;\n    }\n  }\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin = 'program') {\n    // Wait for `afterNextRender` to ensure iOS VoiceOver screen reader focuses the first item (#24735).\n    this._firstItemFocusRef?.destroy();\n    this._firstItemFocusRef = afterNextRender(() => {\n      let menuPanel = null;\n      if (this._directDescendantItems.length) {\n        // Because the `mat-menuPanel` is at the DOM insertion point, not inside the overlay, we don't\n        // have a nice way of getting a hold of the menuPanel panel. We can't use a `ViewChild` either\n        // because the panel is inside an `ng-template`. We work around it by starting from one of\n        // the items and walking up the DOM.\n        menuPanel = this._directDescendantItems.first._getHostElement().closest('[role=\"menu\"]');\n      }\n      // If an item in the menuPanel is already focused, avoid overriding the focus.\n      if (!menuPanel || !menuPanel.contains(document.activeElement)) {\n        const manager = this._keyManager;\n        manager.setFocusOrigin(origin).setFirstItemActive();\n        // If there's no active item at this point, it means that all the items are disabled.\n        // Move focus to the menuPanel panel so keyboard events like Escape still work. Also this will\n        // give _some_ feedback to screen readers.\n        if (!manager.activeItem && menuPanel) {\n          menuPanel.focus();\n        }\n      }\n    }, {\n      injector: this._injector\n    });\n  }\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n  /**\n   * @deprecated No longer used and will be removed.\n   * @breaking-change 21.0.0\n   */\n  setElevation(_depth) {}\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX = this.xPosition, posY = this.yPosition) {\n    this._classList = {\n      ...this._classList,\n      ['mat-menu-before']: posX === 'before',\n      ['mat-menu-after']: posX === 'after',\n      ['mat-menu-above']: posY === 'above',\n      ['mat-menu-below']: posY === 'below'\n    };\n    this._changeDetectorRef.markForCheck();\n  }\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n  _onAnimationStart(event) {\n    this._isAnimating = true;\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n  /**\n   * Sets up a stream that will keep track of any newly-added menu items and will update the list\n   * of direct descendants. We collect the descendants this way, because `_allItems` can include\n   * items that are part of child menus, and using a custom way of registering items is unreliable\n   * when it comes to maintaining the item order.\n   */\n  _updateDirectDescendants() {\n    this._allItems.changes.pipe(startWith(this._allItems)).subscribe(items => {\n      this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n      this._directDescendantItems.notifyOnChanges();\n    });\n  }\n  static ɵfac = function MatMenu_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatMenu)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatMenu,\n    selectors: [[\"mat-menu\"]],\n    contentQueries: function MatMenu_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, MAT_MENU_CONTENT, 5);\n        i0.ɵɵcontentQuery(dirIndex, MatMenuItem, 5);\n        i0.ɵɵcontentQuery(dirIndex, MatMenuItem, 4);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.lazyContent = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._allItems = _t);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.items = _t);\n      }\n    },\n    viewQuery: function MatMenu_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(TemplateRef, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);\n      }\n    },\n    hostVars: 3,\n    hostBindings: function MatMenu_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"aria-label\", null)(\"aria-labelledby\", null)(\"aria-describedby\", null);\n      }\n    },\n    inputs: {\n      backdropClass: \"backdropClass\",\n      ariaLabel: [0, \"aria-label\", \"ariaLabel\"],\n      ariaLabelledby: [0, \"aria-labelledby\", \"ariaLabelledby\"],\n      ariaDescribedby: [0, \"aria-describedby\", \"ariaDescribedby\"],\n      xPosition: \"xPosition\",\n      yPosition: \"yPosition\",\n      overlapTrigger: [2, \"overlapTrigger\", \"overlapTrigger\", booleanAttribute],\n      hasBackdrop: [2, \"hasBackdrop\", \"hasBackdrop\", value => value == null ? null : booleanAttribute(value)],\n      panelClass: [0, \"class\", \"panelClass\"],\n      classList: \"classList\"\n    },\n    outputs: {\n      closed: \"closed\",\n      close: \"close\"\n    },\n    exportAs: [\"matMenu\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: MAT_MENU_PANEL,\n      useExisting: MatMenu\n    }]), i0.ɵɵInputTransformsFeature],\n    ngContentSelectors: _c3,\n    decls: 1,\n    vars: 0,\n    consts: [[\"tabindex\", \"-1\", \"role\", \"menu\", 1, \"mat-mdc-menu-panel\", 3, \"click\", \"id\"], [1, \"mat-mdc-menu-content\"]],\n    template: function MatMenu_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵtemplate(0, MatMenu_ng_template_0_Template, 3, 7, \"ng-template\");\n      }\n    },\n    styles: [\"mat-menu{display:none}.mat-mdc-menu-content{margin:0;padding:8px 0;outline:0}.mat-mdc-menu-content,.mat-mdc-menu-content .mat-mdc-menu-item .mat-mdc-menu-item-text{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;flex:1;white-space:normal;font-family:var(--mat-menu-item-label-text-font, var(--mat-sys-label-large-font));line-height:var(--mat-menu-item-label-text-line-height, var(--mat-sys-label-large-line-height));font-size:var(--mat-menu-item-label-text-size, var(--mat-sys-label-large-size));letter-spacing:var(--mat-menu-item-label-text-tracking, var(--mat-sys-label-large-tracking));font-weight:var(--mat-menu-item-label-text-weight, var(--mat-sys-label-large-weight))}.mat-mdc-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;box-sizing:border-box;outline:0;border-radius:var(--mat-menu-container-shape, var(--mat-sys-corner-extra-small));background-color:var(--mat-menu-container-color, var(--mat-sys-surface-container));box-shadow:var(--mat-menu-container-elevation-shadow, 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12));will-change:transform,opacity}.mat-mdc-menu-panel.ng-animating{pointer-events:none}.mat-mdc-menu-panel.ng-animating:has(.mat-mdc-menu-content:empty){display:none}@media(forced-colors: active){.mat-mdc-menu-panel{outline:solid 1px}}.mat-mdc-menu-panel .mat-divider{color:var(--mat-menu-divider-color, var(--mat-sys-surface-variant));margin-bottom:var(--mat-menu-divider-bottom-spacing, 8px);margin-top:var(--mat-menu-divider-top-spacing, 8px)}.mat-mdc-menu-item{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;cursor:pointer;width:100%;text-align:left;box-sizing:border-box;color:inherit;font-size:inherit;background:none;text-decoration:none;margin:0;min-height:48px;padding-left:var(--mat-menu-item-leading-spacing, 12px);padding-right:var(--mat-menu-item-trailing-spacing, 12px);-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-mdc-menu-item::-moz-focus-inner{border:0}[dir=rtl] .mat-mdc-menu-item{padding-left:var(--mat-menu-item-trailing-spacing, 12px);padding-right:var(--mat-menu-item-leading-spacing, 12px)}.mat-mdc-menu-item:has(.material-icons,mat-icon,[matButtonIcon]){padding-left:var(--mat-menu-item-with-icon-leading-spacing, 12px);padding-right:var(--mat-menu-item-with-icon-trailing-spacing, 12px)}[dir=rtl] .mat-mdc-menu-item:has(.material-icons,mat-icon,[matButtonIcon]){padding-left:var(--mat-menu-item-with-icon-trailing-spacing, 12px);padding-right:var(--mat-menu-item-with-icon-leading-spacing, 12px)}.mat-mdc-menu-item,.mat-mdc-menu-item:visited,.mat-mdc-menu-item:link{color:var(--mat-menu-item-label-text-color, var(--mat-sys-on-surface))}.mat-mdc-menu-item .mat-icon-no-color,.mat-mdc-menu-item .mat-mdc-menu-submenu-icon{color:var(--mat-menu-item-icon-color, var(--mat-sys-on-surface-variant))}.mat-mdc-menu-item[disabled]{cursor:default;opacity:.38}.mat-mdc-menu-item[disabled]::after{display:block;position:absolute;content:\\\"\\\";top:0;left:0;bottom:0;right:0}.mat-mdc-menu-item:focus{outline:0}.mat-mdc-menu-item .mat-icon{flex-shrink:0;margin-right:var(--mat-menu-item-spacing, 12px);height:var(--mat-menu-item-icon-size, 24px);width:var(--mat-menu-item-icon-size, 24px)}[dir=rtl] .mat-mdc-menu-item{text-align:right}[dir=rtl] .mat-mdc-menu-item .mat-icon{margin-right:0;margin-left:var(--mat-menu-item-spacing, 12px)}.mat-mdc-menu-item:not([disabled]):hover{background-color:var(--mat-menu-item-hover-state-layer-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-hover-state-layer-opacity) * 100%), transparent))}.mat-mdc-menu-item:not([disabled]).cdk-program-focused,.mat-mdc-menu-item:not([disabled]).cdk-keyboard-focused,.mat-mdc-menu-item:not([disabled]).mat-mdc-menu-item-highlighted{background-color:var(--mat-menu-item-focus-state-layer-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-focus-state-layer-opacity) * 100%), transparent))}@media(forced-colors: active){.mat-mdc-menu-item{margin-top:1px}}.mat-mdc-menu-submenu-icon{width:var(--mat-menu-item-icon-size, 24px);height:10px;fill:currentColor;padding-left:var(--mat-menu-item-spacing, 12px)}[dir=rtl] .mat-mdc-menu-submenu-icon{padding-right:var(--mat-menu-item-spacing, 12px);padding-left:0}[dir=rtl] .mat-mdc-menu-submenu-icon polygon{transform:scaleX(-1);transform-origin:center}@media(forced-colors: active){.mat-mdc-menu-submenu-icon{fill:CanvasText}}.mat-mdc-menu-item .mat-mdc-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"],\n    encapsulation: 2,\n    data: {\n      animation: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems]\n    },\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatMenu, [{\n    type: Component,\n    args: [{\n      selector: 'mat-menu',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      exportAs: 'matMenu',\n      host: {\n        '[attr.aria-label]': 'null',\n        '[attr.aria-labelledby]': 'null',\n        '[attr.aria-describedby]': 'null'\n      },\n      animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems],\n      providers: [{\n        provide: MAT_MENU_PANEL,\n        useExisting: MatMenu\n      }],\n      template: \"<ng-template>\\n  <div\\n    class=\\\"mat-mdc-menu-panel\\\"\\n    [id]=\\\"panelId\\\"\\n    [class]=\\\"_classList\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-mdc-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\",\n      styles: [\"mat-menu{display:none}.mat-mdc-menu-content{margin:0;padding:8px 0;outline:0}.mat-mdc-menu-content,.mat-mdc-menu-content .mat-mdc-menu-item .mat-mdc-menu-item-text{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;flex:1;white-space:normal;font-family:var(--mat-menu-item-label-text-font, var(--mat-sys-label-large-font));line-height:var(--mat-menu-item-label-text-line-height, var(--mat-sys-label-large-line-height));font-size:var(--mat-menu-item-label-text-size, var(--mat-sys-label-large-size));letter-spacing:var(--mat-menu-item-label-text-tracking, var(--mat-sys-label-large-tracking));font-weight:var(--mat-menu-item-label-text-weight, var(--mat-sys-label-large-weight))}.mat-mdc-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;box-sizing:border-box;outline:0;border-radius:var(--mat-menu-container-shape, var(--mat-sys-corner-extra-small));background-color:var(--mat-menu-container-color, var(--mat-sys-surface-container));box-shadow:var(--mat-menu-container-elevation-shadow, 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12));will-change:transform,opacity}.mat-mdc-menu-panel.ng-animating{pointer-events:none}.mat-mdc-menu-panel.ng-animating:has(.mat-mdc-menu-content:empty){display:none}@media(forced-colors: active){.mat-mdc-menu-panel{outline:solid 1px}}.mat-mdc-menu-panel .mat-divider{color:var(--mat-menu-divider-color, var(--mat-sys-surface-variant));margin-bottom:var(--mat-menu-divider-bottom-spacing, 8px);margin-top:var(--mat-menu-divider-top-spacing, 8px)}.mat-mdc-menu-item{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;cursor:pointer;width:100%;text-align:left;box-sizing:border-box;color:inherit;font-size:inherit;background:none;text-decoration:none;margin:0;min-height:48px;padding-left:var(--mat-menu-item-leading-spacing, 12px);padding-right:var(--mat-menu-item-trailing-spacing, 12px);-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-mdc-menu-item::-moz-focus-inner{border:0}[dir=rtl] .mat-mdc-menu-item{padding-left:var(--mat-menu-item-trailing-spacing, 12px);padding-right:var(--mat-menu-item-leading-spacing, 12px)}.mat-mdc-menu-item:has(.material-icons,mat-icon,[matButtonIcon]){padding-left:var(--mat-menu-item-with-icon-leading-spacing, 12px);padding-right:var(--mat-menu-item-with-icon-trailing-spacing, 12px)}[dir=rtl] .mat-mdc-menu-item:has(.material-icons,mat-icon,[matButtonIcon]){padding-left:var(--mat-menu-item-with-icon-trailing-spacing, 12px);padding-right:var(--mat-menu-item-with-icon-leading-spacing, 12px)}.mat-mdc-menu-item,.mat-mdc-menu-item:visited,.mat-mdc-menu-item:link{color:var(--mat-menu-item-label-text-color, var(--mat-sys-on-surface))}.mat-mdc-menu-item .mat-icon-no-color,.mat-mdc-menu-item .mat-mdc-menu-submenu-icon{color:var(--mat-menu-item-icon-color, var(--mat-sys-on-surface-variant))}.mat-mdc-menu-item[disabled]{cursor:default;opacity:.38}.mat-mdc-menu-item[disabled]::after{display:block;position:absolute;content:\\\"\\\";top:0;left:0;bottom:0;right:0}.mat-mdc-menu-item:focus{outline:0}.mat-mdc-menu-item .mat-icon{flex-shrink:0;margin-right:var(--mat-menu-item-spacing, 12px);height:var(--mat-menu-item-icon-size, 24px);width:var(--mat-menu-item-icon-size, 24px)}[dir=rtl] .mat-mdc-menu-item{text-align:right}[dir=rtl] .mat-mdc-menu-item .mat-icon{margin-right:0;margin-left:var(--mat-menu-item-spacing, 12px)}.mat-mdc-menu-item:not([disabled]):hover{background-color:var(--mat-menu-item-hover-state-layer-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-hover-state-layer-opacity) * 100%), transparent))}.mat-mdc-menu-item:not([disabled]).cdk-program-focused,.mat-mdc-menu-item:not([disabled]).cdk-keyboard-focused,.mat-mdc-menu-item:not([disabled]).mat-mdc-menu-item-highlighted{background-color:var(--mat-menu-item-focus-state-layer-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-focus-state-layer-opacity) * 100%), transparent))}@media(forced-colors: active){.mat-mdc-menu-item{margin-top:1px}}.mat-mdc-menu-submenu-icon{width:var(--mat-menu-item-icon-size, 24px);height:10px;fill:currentColor;padding-left:var(--mat-menu-item-spacing, 12px)}[dir=rtl] .mat-mdc-menu-submenu-icon{padding-right:var(--mat-menu-item-spacing, 12px);padding-left:0}[dir=rtl] .mat-mdc-menu-submenu-icon polygon{transform:scaleX(-1);transform-origin:center}@media(forced-colors: active){.mat-mdc-menu-submenu-icon{fill:CanvasText}}.mat-mdc-menu-item .mat-mdc-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"]\n    }]\n  }], () => [], {\n    _allItems: [{\n      type: ContentChildren,\n      args: [MatMenuItem, {\n        descendants: true\n      }]\n    }],\n    backdropClass: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    ariaDescribedby: [{\n      type: Input,\n      args: ['aria-describedby']\n    }],\n    xPosition: [{\n      type: Input\n    }],\n    yPosition: [{\n      type: Input\n    }],\n    templateRef: [{\n      type: ViewChild,\n      args: [TemplateRef]\n    }],\n    items: [{\n      type: ContentChildren,\n      args: [MatMenuItem, {\n        descendants: false\n      }]\n    }],\n    lazyContent: [{\n      type: ContentChild,\n      args: [MAT_MENU_CONTENT]\n    }],\n    overlapTrigger: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    hasBackdrop: [{\n      type: Input,\n      args: [{\n        transform: value => value == null ? null : booleanAttribute(value)\n      }]\n    }],\n    panelClass: [{\n      type: Input,\n      args: ['class']\n    }],\n    classList: [{\n      type: Input\n    }],\n    closed: [{\n      type: Output\n    }],\n    close: [{\n      type: Output\n    }]\n  });\n})();\n\n/** Injection token that determines the scroll handling while the menu is open. */\nconst MAT_MENU_SCROLL_STRATEGY = new InjectionToken('mat-menu-scroll-strategy', {\n  providedIn: 'root',\n  factory: () => {\n    const overlay = inject(Overlay);\n    return () => overlay.scrollStrategies.reposition();\n  }\n});\n/** @docs-private */\nfunction MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY\n};\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true\n});\n/**\n * Default top padding of the menu panel.\n * @deprecated No longer being used. Will be removed.\n * @breaking-change 15.0.0\n */\nconst MENU_PANEL_TOP_PADDING = 8;\n/** Directive applied to an element that should trigger a `mat-menu`. */\nclass MatMenuTrigger {\n  _overlay = inject(Overlay);\n  _element = inject(ElementRef);\n  _viewContainerRef = inject(ViewContainerRef);\n  _menuItemInstance = inject(MatMenuItem, {\n    optional: true,\n    self: true\n  });\n  _dir = inject(Directionality, {\n    optional: true\n  });\n  _focusMonitor = inject(FocusMonitor);\n  _ngZone = inject(NgZone);\n  _scrollStrategy = inject(MAT_MENU_SCROLL_STRATEGY);\n  _changeDetectorRef = inject(ChangeDetectorRef);\n  _portal;\n  _overlayRef = null;\n  _menuOpen = false;\n  _closingActionsSubscription = Subscription.EMPTY;\n  _hoverSubscription = Subscription.EMPTY;\n  _menuCloseSubscription = Subscription.EMPTY;\n  /**\n   * We're specifically looking for a `MatMenu` here since the generic `MatMenuPanel`\n   * interface lacks some functionality around nested menus and animations.\n   */\n  _parentMaterialMenu;\n  /**\n   * Cached value of the padding of the parent menu panel.\n   * Used to offset sub-menus to compensate for the padding.\n   */\n  _parentInnerPadding;\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  _handleTouchStart = event => {\n    if (!isFakeTouchstartFromScreenReader(event)) {\n      this._openedBy = 'touch';\n    }\n  };\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy = undefined;\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  get _deprecatedMatMenuTriggerFor() {\n    return this.menu;\n  }\n  set _deprecatedMatMenuTriggerFor(v) {\n    this.menu = v;\n  }\n  /** References the menu instance that the trigger is associated with. */\n  get menu() {\n    return this._menu;\n  }\n  set menu(menu) {\n    if (menu === this._menu) {\n      return;\n    }\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n    if (menu) {\n      if (menu === this._parentMaterialMenu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throwMatMenuRecursiveError();\n      }\n      this._menuCloseSubscription = menu.close.subscribe(reason => {\n        this._destroyMenu(reason);\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMaterialMenu) {\n          this._parentMaterialMenu.closed.emit(reason);\n        }\n      });\n    }\n    this._menuItemInstance?._setTriggersSubmenu(this.triggersSubmenu());\n  }\n  _menu;\n  /** Data to be passed along to any lazily-rendered content. */\n  menuData;\n  /**\n   * Whether focus should be restored when the menu is closed.\n   * Note that disabling this option can have accessibility implications\n   * and it's up to you to manage focus, if you decide to turn it off.\n   */\n  restoreFocus = true;\n  /** Event emitted when the associated menu is opened. */\n  menuOpened = new EventEmitter();\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  onMenuOpen = this.menuOpened;\n  /** Event emitted when the associated menu is closed. */\n  menuClosed = new EventEmitter();\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  onMenuClose = this.menuClosed;\n  constructor() {\n    const parentMenu = inject(MAT_MENU_PANEL, {\n      optional: true\n    });\n    this._parentMaterialMenu = parentMenu instanceof MatMenu ? parentMenu : undefined;\n    this._element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n  }\n  ngAfterContentInit() {\n    this._handleHover();\n  }\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n    this._menuCloseSubscription.unsubscribe();\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n  /** Whether the menu is open. */\n  get menuOpen() {\n    return this._menuOpen;\n  }\n  /** The text direction of the containing app. */\n  get dir() {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu() {\n    return !!(this._menuItemInstance && this._parentMaterialMenu && this.menu);\n  }\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu() {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n  /** Opens the menu. */\n  openMenu() {\n    const menu = this.menu;\n    if (this._menuOpen || !menu) {\n      return;\n    }\n    const overlayRef = this._createOverlay(menu);\n    const overlayConfig = overlayRef.getConfig();\n    const positionStrategy = overlayConfig.positionStrategy;\n    this._setPosition(menu, positionStrategy);\n    overlayConfig.hasBackdrop = menu.hasBackdrop == null ? !this.triggersSubmenu() : menu.hasBackdrop;\n    overlayRef.attach(this._getPortal(menu));\n    if (menu.lazyContent) {\n      menu.lazyContent.attach(this.menuData);\n    }\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu(menu);\n    if (menu instanceof MatMenu) {\n      menu._startAnimation();\n      menu._directDescendantItems.changes.pipe(takeUntil(menu.close)).subscribe(() => {\n        // Re-adjust the position without locking when the amount of items\n        // changes so that the overlay is allowed to pick a new optimal position.\n        positionStrategy.withLockedPosition(false).reapplyLastPosition();\n        positionStrategy.withLockedPosition(true);\n      });\n    }\n  }\n  /** Closes the menu. */\n  closeMenu() {\n    this.menu?.close.emit();\n  }\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin, options) {\n    if (this._focusMonitor && origin) {\n      this._focusMonitor.focusVia(this._element, origin, options);\n    } else {\n      this._element.nativeElement.focus(options);\n    }\n  }\n  /**\n   * Updates the position of the menu to ensure that it fits all options within the viewport.\n   */\n  updatePosition() {\n    this._overlayRef?.updatePosition();\n  }\n  /** Closes the menu and does the necessary cleanup. */\n  _destroyMenu(reason) {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n    const menu = this.menu;\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n    // Always restore focus if the user is navigating using the keyboard or the menu was opened\n    // programmatically. We don't restore for non-root triggers, because it can prevent focus\n    // from making it back to the root trigger when closing a long chain of menus by clicking\n    // on the backdrop.\n    if (this.restoreFocus && (reason === 'keydown' || !this._openedBy || !this.triggersSubmenu())) {\n      this.focus(this._openedBy);\n    }\n    this._openedBy = undefined;\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone.pipe(filter(event => event.toState === 'void'), take(1),\n        // Interrupt if the content got re-attached.\n        takeUntil(menu.lazyContent._attached)).subscribe({\n          next: () => menu.lazyContent.detach(),\n          // No matter whether the content got re-attached, reset the menu.\n          complete: () => this._setIsMenuOpen(false)\n        });\n      } else {\n        this._setIsMenuOpen(false);\n      }\n    } else {\n      this._setIsMenuOpen(false);\n      menu?.lazyContent?.detach();\n    }\n  }\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  _initMenu(menu) {\n    menu.parentMenu = this.triggersSubmenu() ? this._parentMaterialMenu : undefined;\n    menu.direction = this.dir;\n    menu.focusFirstItem(this._openedBy || 'program');\n    this._setIsMenuOpen(true);\n  }\n  // set state rather than toggle to support triggers sharing a menu\n  _setIsMenuOpen(isOpen) {\n    if (isOpen !== this._menuOpen) {\n      this._menuOpen = isOpen;\n      this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n      if (this.triggersSubmenu()) {\n        this._menuItemInstance._setHighlighted(isOpen);\n      }\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  _createOverlay(menu) {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig(menu);\n      this._subscribeToPositions(menu, config.positionStrategy);\n      this._overlayRef = this._overlay.create(config);\n      this._overlayRef.keydownEvents().subscribe(event => {\n        if (this.menu instanceof MatMenu) {\n          this.menu._handleKeydown(event);\n        }\n      });\n    }\n    return this._overlayRef;\n  }\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  _getOverlayConfig(menu) {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position().flexibleConnectedTo(this._element).withLockedPosition().withGrowAfterOpen().withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n      backdropClass: menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      panelClass: menu.overlayPanelClass,\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir || 'ltr'\n    });\n  }\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  _subscribeToPositions(menu, position) {\n    if (menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        this._ngZone.run(() => {\n          const posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n          const posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n          menu.setPositionClasses(posX, posY);\n        });\n      });\n    }\n  }\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  _setPosition(menu, positionStrategy) {\n    let [originX, originFallbackX] = menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n    let [overlayY, overlayFallbackY] = menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      if (this._parentMaterialMenu) {\n        if (this._parentInnerPadding == null) {\n          const firstItem = this._parentMaterialMenu.items.first;\n          this._parentInnerPadding = firstItem ? firstItem._getHostElement().offsetTop : 0;\n        }\n        offsetY = overlayY === 'bottom' ? this._parentInnerPadding : -this._parentInnerPadding;\n      }\n    } else if (!menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n    positionStrategy.withPositions([{\n      originX,\n      originY,\n      overlayX,\n      overlayY,\n      offsetY\n    }, {\n      originX: originFallbackX,\n      originY,\n      overlayX: overlayFallbackX,\n      overlayY,\n      offsetY\n    }, {\n      originX,\n      originY: originFallbackY,\n      overlayX,\n      overlayY: overlayFallbackY,\n      offsetY: -offsetY\n    }, {\n      originX: originFallbackX,\n      originY: originFallbackY,\n      overlayX: overlayFallbackX,\n      overlayY: overlayFallbackY,\n      offsetY: -offsetY\n    }]);\n  }\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  _menuClosingActions() {\n    const backdrop = this._overlayRef.backdropClick();\n    const detachments = this._overlayRef.detachments();\n    const parentClose = this._parentMaterialMenu ? this._parentMaterialMenu.closed : of();\n    const hover = this._parentMaterialMenu ? this._parentMaterialMenu._hovered().pipe(filter(active => active !== this._menuItemInstance), filter(() => this._menuOpen)) : of();\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event) {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : undefined;\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event) {\n    const keyCode = event.keyCode;\n    // Pressing enter on the trigger will trigger the click handler later.\n    if (keyCode === ENTER || keyCode === SPACE) {\n      this._openedBy = 'keyboard';\n    }\n    if (this.triggersSubmenu() && (keyCode === RIGHT_ARROW && this.dir === 'ltr' || keyCode === LEFT_ARROW && this.dir === 'rtl')) {\n      this._openedBy = 'keyboard';\n      this.openMenu();\n    }\n  }\n  /** Handles click events on the trigger. */\n  _handleClick(event) {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n  /** Handles the cases where the user hovers over the trigger. */\n  _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu() || !this._parentMaterialMenu) {\n      return;\n    }\n    this._hoverSubscription = this._parentMaterialMenu._hovered()\n    // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n    // with different data and triggers), we have to delay it by a tick to ensure that\n    // it won't be closed immediately after it is opened.\n    .pipe(filter(active => active === this._menuItemInstance && !active.disabled), delay(0, asapScheduler)).subscribe(() => {\n      this._openedBy = 'mouse';\n      // If the same menu is used between multiple triggers, it might still be animating\n      // while the new trigger tries to re-open it. Wait for the animation to finish\n      // before doing so. Also interrupt if the user moves to another item.\n      if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n        // We need the `delay(0)` here in order to avoid\n        // 'changed after checked' errors in some cases. See #12194.\n        this.menu._animationDone.pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMaterialMenu._hovered())).subscribe(() => this.openMenu());\n      } else {\n        this.openMenu();\n      }\n    });\n  }\n  /** Gets the portal that should be attached to the overlay. */\n  _getPortal(menu) {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== menu.templateRef) {\n      this._portal = new TemplatePortal(menu.templateRef, this._viewContainerRef);\n    }\n    return this._portal;\n  }\n  static ɵfac = function MatMenuTrigger_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatMenuTrigger)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatMenuTrigger,\n    selectors: [[\"\", \"mat-menu-trigger-for\", \"\"], [\"\", \"matMenuTriggerFor\", \"\"]],\n    hostAttrs: [1, \"mat-mdc-menu-trigger\"],\n    hostVars: 3,\n    hostBindings: function MatMenuTrigger_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function MatMenuTrigger_click_HostBindingHandler($event) {\n          return ctx._handleClick($event);\n        })(\"mousedown\", function MatMenuTrigger_mousedown_HostBindingHandler($event) {\n          return ctx._handleMousedown($event);\n        })(\"keydown\", function MatMenuTrigger_keydown_HostBindingHandler($event) {\n          return ctx._handleKeydown($event);\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵattribute(\"aria-haspopup\", ctx.menu ? \"menu\" : null)(\"aria-expanded\", ctx.menuOpen)(\"aria-controls\", ctx.menuOpen ? ctx.menu.panelId : null);\n      }\n    },\n    inputs: {\n      _deprecatedMatMenuTriggerFor: [0, \"mat-menu-trigger-for\", \"_deprecatedMatMenuTriggerFor\"],\n      menu: [0, \"matMenuTriggerFor\", \"menu\"],\n      menuData: [0, \"matMenuTriggerData\", \"menuData\"],\n      restoreFocus: [0, \"matMenuTriggerRestoreFocus\", \"restoreFocus\"]\n    },\n    outputs: {\n      menuOpened: \"menuOpened\",\n      onMenuOpen: \"onMenuOpen\",\n      menuClosed: \"menuClosed\",\n      onMenuClose: \"onMenuClose\"\n    },\n    exportAs: [\"matMenuTrigger\"]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatMenuTrigger, [{\n    type: Directive,\n    args: [{\n      selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n      host: {\n        'class': 'mat-mdc-menu-trigger',\n        '[attr.aria-haspopup]': 'menu ? \"menu\" : null',\n        '[attr.aria-expanded]': 'menuOpen',\n        '[attr.aria-controls]': 'menuOpen ? menu.panelId : null',\n        '(click)': '_handleClick($event)',\n        '(mousedown)': '_handleMousedown($event)',\n        '(keydown)': '_handleKeydown($event)'\n      },\n      exportAs: 'matMenuTrigger'\n    }]\n  }], () => [], {\n    _deprecatedMatMenuTriggerFor: [{\n      type: Input,\n      args: ['mat-menu-trigger-for']\n    }],\n    menu: [{\n      type: Input,\n      args: ['matMenuTriggerFor']\n    }],\n    menuData: [{\n      type: Input,\n      args: ['matMenuTriggerData']\n    }],\n    restoreFocus: [{\n      type: Input,\n      args: ['matMenuTriggerRestoreFocus']\n    }],\n    menuOpened: [{\n      type: Output\n    }],\n    onMenuOpen: [{\n      type: Output\n    }],\n    menuClosed: [{\n      type: Output\n    }],\n    onMenuClose: [{\n      type: Output\n    }]\n  });\n})();\nclass MatMenuModule {\n  static ɵfac = function MatMenuModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || MatMenuModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatMenuModule,\n    imports: [MatRippleModule, MatCommonModule, OverlayModule, MatMenu, MatMenuItem, MatMenuContent, MatMenuTrigger],\n    exports: [CdkScrollableModule, MatMenu, MatCommonModule, MatMenuItem, MatMenuContent, MatMenuTrigger]\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    imports: [MatRippleModule, MatCommonModule, OverlayModule, CdkScrollableModule, MatCommonModule]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatMenuModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatRippleModule, MatCommonModule, OverlayModule, MatMenu, MatMenuItem, MatMenuContent, MatMenuTrigger],\n      exports: [CdkScrollableModule, MatMenu, MatCommonModule, MatMenuItem, MatMenuContent, MatMenuTrigger],\n      providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_MENU_CONTENT, MAT_MENU_DEFAULT_OPTIONS, MAT_MENU_PANEL, MAT_MENU_SCROLL_STRATEGY, MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER, MENU_PANEL_TOP_PADDING, MatMenu, MatMenuContent, MatMenuItem, MatMenuModule, MatMenuTrigger, fadeInItems, matMenuAnimations, transformMenu };","map":{"version":3,"names":["i0","InjectionToken","inject","ElementRef","ChangeDetectorRef","booleanAttribute","Component","ChangeDetectionStrategy","ViewEncapsulation","Input","TemplateRef","ApplicationRef","Injector","ViewContainerRef","Directive","QueryList","EventEmitter","afterNextRender","ContentChildren","ViewChild","ContentChild","Output","NgZone","NgModule","FocusMonitor","_IdGenerator","FocusKeyManager","isFakeTouchstartFromScreenReader","isFakeMousedownFromScreenReader","UP_ARROW","DOWN_ARROW","RIGHT_ARROW","LEFT_ARROW","ESCAPE","hasModifierKey","ENTER","SPACE","Subject","merge","Subscription","of","asapScheduler","startWith","switchMap","takeUntil","filter","take","delay","DOCUMENT","_StructuralStylesLoader","MatRipple","MatRippleModule","MatCommonModule","_CdkPrivateStyleLoader","TemplatePortal","DomPortalOutlet","trigger","state","style","transition","animate","Directionality","Overlay","OverlayConfig","OverlayModule","normalizePassiveListenerOptions","CdkScrollableModule","_c0","_c1","_c2","MatMenuItem_Conditional_4_Template","rf","ctx","ɵɵnamespaceSVG","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","_c3","MatMenu_ng_template_0_Template","_r1","ɵɵgetCurrentView","ɵɵlistener","MatMenu_ng_template_0_Template_div_click_0_listener","ɵɵrestoreView","ctx_r1","ɵɵnextContext","ɵɵresetView","closed","emit","MatMenu_ng_template_0_Template_div_animation_transformMenu_start_0_listener","$event","_onAnimationStart","MatMenu_ng_template_0_Template_div_animation_transformMenu_done_0_listener","_onAnimationDone","ɵɵprojection","ɵɵclassMap","_classList","ɵɵproperty","panelId","_panelAnimationState","ɵɵattribute","ariaLabel","ariaLabelledby","ariaDescribedby","MAT_MENU_PANEL","MatMenuItem","_elementRef","_document","_focusMonitor","_parentMenu","optional","_changeDetectorRef","role","disabled","disableRipple","_hovered","_focused","_highlighted","_triggersSubmenu","constructor","load","addItem","focus","origin","options","focusVia","_getHostElement","next","ngAfterViewInit","monitor","ngOnDestroy","stopMonitoring","removeItem","complete","_getTabIndex","nativeElement","_checkDisabled","event","preventDefault","stopPropagation","_handleMouseEnter","getLabel","clone","cloneNode","icons","querySelectorAll","i","length","remove","textContent","trim","_setHighlighted","isHighlighted","markForCheck","_setTriggersSubmenu","triggersSubmenu","_hasFocus","activeElement","ɵfac","MatMenuItem_Factory","__ngFactoryType__","ɵcmp","ɵɵdefineComponent","type","selectors","hostAttrs","hostVars","hostBindings","MatMenuItem_HostBindings","MatMenuItem_click_HostBindingHandler","MatMenuItem_mouseenter_HostBindingHandler","ɵɵclassProp","inputs","exportAs","features","ɵɵInputTransformsFeature","attrs","ngContentSelectors","decls","vars","consts","template","MatMenuItem_Template","ɵɵprojectionDef","ɵɵtemplate","ɵɵadvance","ɵɵconditional","dependencies","encapsulation","changeDetection","ngDevMode","ɵsetClassMetadata","args","selector","host","OnPush","None","imports","transform","throwMatMenuInvalidPositionX","Error","throwMatMenuInvalidPositionY","throwMatMenuRecursiveError","MAT_MENU_CONTENT","MatMenuContent","_template","_appRef","_injector","_viewContainerRef","_portal","_outlet","_attached","attach","context","detach","createElement","element","elementRef","parentNode","insertBefore","outletElement","isAttached","dispose","MatMenuContent_Factory","ɵdir","ɵɵdefineDirective","ɵɵProvidersFeature","provide","useExisting","providers","matMenuAnimations","transformMenu","opacity","fadeInItems","MAT_MENU_DEFAULT_OPTIONS","providedIn","factory","MAT_MENU_DEFAULT_OPTIONS_FACTORY","overlapTrigger","xPosition","yPosition","backdropClass","MatMenu","_keyManager","_xPosition","_yPosition","_firstItemFocusRef","_allItems","_directDescendantItems","_animationDone","_isAnimating","parentMenu","direction","overlayPanelClass","value","setPositionClasses","templateRef","items","lazyContent","hasBackdrop","panelClass","classes","previousPanelClass","_previousPanelClass","newClassList","split","forEach","className","classList","close","getId","defaultOptions","ngOnInit","ngAfterContentInit","_updateDirectDescendants","withWrap","withTypeAhead","withHomeAndEnd","tabOut","subscribe","changes","pipe","map","item","focusedItem","updateActiveItem","itemsList","manager","activeItem","toArray","index","Math","max","min","activeItemIndex","setActiveItem","setNextItemActive","destroy","itemChanges","_item","_handleKeydown","keyCode","setFocusOrigin","onKeydown","focusFirstItem","menuPanel","first","closest","contains","document","setFirstItemActive","injector","resetActiveItem","setElevation","_depth","posX","posY","_startAnimation","_resetAnimation","toState","scrollTop","reset","notifyOnChanges","MatMenu_Factory","contentQueries","MatMenu_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","viewQuery","MatMenu_Query","ɵɵviewQuery","MatMenu_HostBindings","outputs","MatMenu_Template","styles","data","animation","animations","descendants","MAT_MENU_SCROLL_STRATEGY","overlay","scrollStrategies","reposition","MAT_MENU_SCROLL_STRATEGY_FACTORY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","passiveEventListenerOptions","passive","MENU_PANEL_TOP_PADDING","MatMenuTrigger","_overlay","_element","_menuItemInstance","self","_dir","_ngZone","_scrollStrategy","_overlayRef","_menuOpen","_closingActionsSubscription","EMPTY","_hoverSubscription","_menuCloseSubscription","_parentMaterialMenu","_parentInnerPadding","_handleTouchStart","_openedBy","undefined","_deprecatedMatMenuTriggerFor","menu","v","_menu","unsubscribe","reason","_destroyMenu","menuData","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","addEventListener","_handleHover","removeEventListener","menuOpen","dir","toggleMenu","closeMenu","openMenu","overlayRef","_createOverlay","overlayConfig","getConfig","positionStrategy","_setPosition","_getPortal","_menuClosingActions","_initMenu","withLockedPosition","reapplyLastPosition","updatePosition","_setIsMenuOpen","isOpen","config","_getOverlayConfig","_subscribeToPositions","create","keydownEvents","position","flexibleConnectedTo","withGrowAfterOpen","withTransformOriginOn","scrollStrategy","positionChanges","change","run","connectionPair","overlayX","overlayY","originX","originFallbackX","overlayFallbackY","originY","originFallbackY","overlayFallbackX","offsetY","firstItem","offsetTop","withPositions","backdrop","backdropClick","detachments","parentClose","hover","active","_handleMousedown","button","_handleClick","MatMenuTrigger_Factory","MatMenuTrigger_HostBindings","MatMenuTrigger_click_HostBindingHandler","MatMenuTrigger_mousedown_HostBindingHandler","MatMenuTrigger_keydown_HostBindingHandler","MatMenuModule","MatMenuModule_Factory","ɵmod","ɵɵdefineNgModule","exports","ɵinj","ɵɵdefineInjector"],"sources":["D:/myWork/posts/post/blog_GraphQl_nodejs_angular19/blog-frontend/node_modules/@angular/material/fesm2022/menu.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, inject, ElementRef, ChangeDetectorRef, booleanAttribute, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, TemplateRef, ApplicationRef, Injector, ViewContainerRef, Directive, QueryList, EventEmitter, afterNextRender, ContentChildren, ViewChild, ContentChild, Output, NgZone, NgModule } from '@angular/core';\nimport { FocusMonitor, _IdGenerator, FocusKeyManager, isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { UP_ARROW, DOWN_ARROW, RIGHT_ARROW, LEFT_ARROW, ESCAPE, hasModifierKey, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { Subject, merge, Subscription, of, asapScheduler } from 'rxjs';\nimport { startWith, switchMap, takeUntil, filter, take, delay } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\nimport { _StructuralStylesLoader, MatRipple, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { _CdkPrivateStyleLoader } from '@angular/cdk/private';\nimport { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nconst MAT_MENU_PANEL = new InjectionToken('MAT_MENU_PANEL');\n\n/**\n * Single item inside a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\nclass MatMenuItem {\n    _elementRef = inject(ElementRef);\n    _document = inject(DOCUMENT);\n    _focusMonitor = inject(FocusMonitor);\n    _parentMenu = inject(MAT_MENU_PANEL, { optional: true });\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    /** ARIA role for the menu item. */\n    role = 'menuitem';\n    /** Whether the menu item is disabled. */\n    disabled = false;\n    /** Whether ripples are disabled on the menu item. */\n    disableRipple = false;\n    /** Stream that emits when the menu item is hovered. */\n    _hovered = new Subject();\n    /** Stream that emits when the menu item is focused. */\n    _focused = new Subject();\n    /** Whether the menu item is highlighted. */\n    _highlighted = false;\n    /** Whether the menu item acts as a trigger for a sub-menu. */\n    _triggersSubmenu = false;\n    constructor() {\n        inject(_CdkPrivateStyleLoader).load(_StructuralStylesLoader);\n        this._parentMenu?.addItem?.(this);\n    }\n    /** Focuses the menu item. */\n    focus(origin, options) {\n        if (this._focusMonitor && origin) {\n            this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n        }\n        else {\n            this._getHostElement().focus(options);\n        }\n        this._focused.next(this);\n    }\n    ngAfterViewInit() {\n        if (this._focusMonitor) {\n            // Start monitoring the element, so it gets the appropriate focused classes. We want\n            // to show the focus style for menu items only when the focus was not caused by a\n            // mouse or touch interaction.\n            this._focusMonitor.monitor(this._elementRef, false);\n        }\n    }\n    ngOnDestroy() {\n        if (this._focusMonitor) {\n            this._focusMonitor.stopMonitoring(this._elementRef);\n        }\n        if (this._parentMenu && this._parentMenu.removeItem) {\n            this._parentMenu.removeItem(this);\n        }\n        this._hovered.complete();\n        this._focused.complete();\n    }\n    /** Used to set the `tabindex`. */\n    _getTabIndex() {\n        return this.disabled ? '-1' : '0';\n    }\n    /** Returns the host DOM element. */\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n    /** Prevents the default element actions if it is disabled. */\n    _checkDisabled(event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n    /** Emits to the hover stream. */\n    _handleMouseEnter() {\n        this._hovered.next(this);\n    }\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel() {\n        const clone = this._elementRef.nativeElement.cloneNode(true);\n        const icons = clone.querySelectorAll('mat-icon, .material-icons');\n        // Strip away icons, so they don't show up in the text.\n        for (let i = 0; i < icons.length; i++) {\n            icons[i].remove();\n        }\n        return clone.textContent?.trim() || '';\n    }\n    _setHighlighted(isHighlighted) {\n        // We need to mark this for check for the case where the content is coming from a\n        // `matMenuContent` whose change detection tree is at the declaration position,\n        // not the insertion position. See #23175.\n        this._highlighted = isHighlighted;\n        this._changeDetectorRef.markForCheck();\n    }\n    _setTriggersSubmenu(triggersSubmenu) {\n        this._triggersSubmenu = triggersSubmenu;\n        this._changeDetectorRef.markForCheck();\n    }\n    _hasFocus() {\n        return this._document && this._document.activeElement === this._getHostElement();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatMenuItem, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"19.0.0\", type: MatMenuItem, isStandalone: true, selector: \"[mat-menu-item]\", inputs: { role: \"role\", disabled: [\"disabled\", \"disabled\", booleanAttribute], disableRipple: [\"disableRipple\", \"disableRipple\", booleanAttribute] }, host: { listeners: { \"click\": \"_checkDisabled($event)\", \"mouseenter\": \"_handleMouseEnter()\" }, properties: { \"attr.role\": \"role\", \"class.mat-mdc-menu-item-highlighted\": \"_highlighted\", \"class.mat-mdc-menu-item-submenu-trigger\": \"_triggersSubmenu\", \"attr.tabindex\": \"_getTabIndex()\", \"attr.aria-disabled\": \"disabled\", \"attr.disabled\": \"disabled || null\" }, classAttribute: \"mat-mdc-menu-item mat-focus-indicator\" }, exportAs: [\"matMenuItem\"], ngImport: i0, template: \"<ng-content select=\\\"mat-icon, [matMenuItemIcon]\\\"></ng-content>\\n<span class=\\\"mat-mdc-menu-item-text\\\"><ng-content></ng-content></span>\\n<div class=\\\"mat-mdc-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n\\n@if (_triggersSubmenu) {\\n     <svg\\n       class=\\\"mat-mdc-menu-submenu-icon\\\"\\n       viewBox=\\\"0 0 5 10\\\"\\n       focusable=\\\"false\\\"\\n       aria-hidden=\\\"true\\\"><polygon points=\\\"0,0 5,5 0,10\\\"/></svg>\\n}\\n\", dependencies: [{ kind: \"directive\", type: MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatMenuItem, decorators: [{\n            type: Component,\n            args: [{ selector: '[mat-menu-item]', exportAs: 'matMenuItem', host: {\n                        '[attr.role]': 'role',\n                        'class': 'mat-mdc-menu-item mat-focus-indicator',\n                        '[class.mat-mdc-menu-item-highlighted]': '_highlighted',\n                        '[class.mat-mdc-menu-item-submenu-trigger]': '_triggersSubmenu',\n                        '[attr.tabindex]': '_getTabIndex()',\n                        '[attr.aria-disabled]': 'disabled',\n                        '[attr.disabled]': 'disabled || null',\n                        '(click)': '_checkDisabled($event)',\n                        '(mouseenter)': '_handleMouseEnter()',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, imports: [MatRipple], template: \"<ng-content select=\\\"mat-icon, [matMenuItemIcon]\\\"></ng-content>\\n<span class=\\\"mat-mdc-menu-item-text\\\"><ng-content></ng-content></span>\\n<div class=\\\"mat-mdc-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n\\n@if (_triggersSubmenu) {\\n     <svg\\n       class=\\\"mat-mdc-menu-submenu-icon\\\"\\n       viewBox=\\\"0 0 5 10\\\"\\n       focusable=\\\"false\\\"\\n       aria-hidden=\\\"true\\\"><polygon points=\\\"0,0 5,5 0,10\\\"/></svg>\\n}\\n\" }]\n        }], ctorParameters: () => [], propDecorators: { role: [{\n                type: Input\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], disableRipple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionX() {\n    throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionY() {\n    throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when a menu is assigned\n * to a trigger that is placed inside the same menu.\n * @docs-private\n */\nfunction throwMatMenuRecursiveError() {\n    throw Error(`matMenuTriggerFor: menu cannot contain its own trigger. Assign a menu that is ` +\n        `not a parent of the trigger or move the trigger outside of the menu.`);\n}\n\n/**\n * Injection token that can be used to reference instances of `MatMenuContent`. It serves\n * as alternative token to the actual `MatMenuContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_MENU_CONTENT = new InjectionToken('MatMenuContent');\n/** Menu content that will be rendered lazily once the menu is opened. */\nclass MatMenuContent {\n    _template = inject(TemplateRef);\n    _appRef = inject(ApplicationRef);\n    _injector = inject(Injector);\n    _viewContainerRef = inject(ViewContainerRef);\n    _document = inject(DOCUMENT);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _portal;\n    _outlet;\n    /** Emits when the menu content has been attached. */\n    _attached = new Subject();\n    constructor() { }\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n    attach(context = {}) {\n        if (!this._portal) {\n            this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n        }\n        this.detach();\n        if (!this._outlet) {\n            this._outlet = new DomPortalOutlet(this._document.createElement('div'), null, this._appRef, this._injector);\n        }\n        const element = this._template.elementRef.nativeElement;\n        // Because we support opening the same menu from different triggers (which in turn have their\n        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n        // risk it staying attached to a pane that's no longer in the DOM.\n        element.parentNode.insertBefore(this._outlet.outletElement, element);\n        // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n        // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n        // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n        // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n        // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n        this._changeDetectorRef.markForCheck();\n        this._portal.attach(this._outlet, context);\n        this._attached.next();\n    }\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n    detach() {\n        if (this._portal.isAttached) {\n            this._portal.detach();\n        }\n    }\n    ngOnDestroy() {\n        if (this._outlet) {\n            this._outlet.dispose();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatMenuContent, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatMenuContent, isStandalone: true, selector: \"ng-template[matMenuContent]\", providers: [{ provide: MAT_MENU_CONTENT, useExisting: MatMenuContent }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatMenuContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[matMenuContent]',\n                    providers: [{ provide: MAT_MENU_CONTENT, useExisting: MatMenuContent }],\n                }]\n        }], ctorParameters: () => [] });\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nconst matMenuAnimations = {\n    /**\n     * This animation controls the menu panel's entry and exit from the page.\n     *\n     * When the menu panel is added to the DOM, it scales in and fades in its border.\n     *\n     * When the menu panel is removed from the DOM, it simply fades out after a brief\n     * delay to display the ripple.\n     */\n    transformMenu: trigger('transformMenu', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(0.8)',\n        })),\n        transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1)',\n        }))),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 }))),\n    ]),\n    /**\n     * This animation fades in the background color and content of the menu panel\n     * after its containing element is scaled in.\n     */\n    fadeInItems: trigger('fadeInItems', [\n        // TODO(crisbeto): this is inside the `transformMenu`\n        // now. Remove next time we do breaking changes.\n        state('showing', style({ opacity: 1 })),\n        transition('void => *', [\n            style({ opacity: 0 }),\n            animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n        ]),\n    ]),\n};\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst fadeInItems = matMenuAnimations.fadeInItems;\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst transformMenu = matMenuAnimations.transformMenu;\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nconst MAT_MENU_DEFAULT_OPTIONS = new InjectionToken('mat-menu-default-options', {\n    providedIn: 'root',\n    factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        overlapTrigger: false,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop',\n    };\n}\nclass MatMenu {\n    _elementRef = inject(ElementRef);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _keyManager;\n    _xPosition;\n    _yPosition;\n    _firstItemFocusRef;\n    /** All items inside the menu. Includes items nested inside another menu. */\n    _allItems;\n    /** Only the direct descendant menu items. */\n    _directDescendantItems = new QueryList();\n    /** Classes to be applied to the menu panel. */\n    _classList = {};\n    /** Current state of the panel animation. */\n    _panelAnimationState = 'void';\n    /** Emits whenever an animation on the menu completes. */\n    _animationDone = new Subject();\n    /** Whether the menu is animating. */\n    _isAnimating;\n    /** Parent menu of the current menu panel. */\n    parentMenu;\n    /** Layout direction of the menu. */\n    direction;\n    /** Class or list of classes to be added to the overlay panel. */\n    overlayPanelClass;\n    /** Class to be added to the backdrop element. */\n    backdropClass;\n    /** aria-label for the menu panel. */\n    ariaLabel;\n    /** aria-labelledby for the menu panel. */\n    ariaLabelledby;\n    /** aria-describedby for the menu panel. */\n    ariaDescribedby;\n    /** Position of the menu in the X axis. */\n    get xPosition() {\n        return this._xPosition;\n    }\n    set xPosition(value) {\n        if (value !== 'before' &&\n            value !== 'after' &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuInvalidPositionX();\n        }\n        this._xPosition = value;\n        this.setPositionClasses();\n    }\n    /** Position of the menu in the Y axis. */\n    get yPosition() {\n        return this._yPosition;\n    }\n    set yPosition(value) {\n        if (value !== 'above' && value !== 'below' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuInvalidPositionY();\n        }\n        this._yPosition = value;\n        this.setPositionClasses();\n    }\n    /** @docs-private */\n    templateRef;\n    /**\n     * List of the items inside of a menu.\n     * @deprecated\n     * @breaking-change 8.0.0\n     */\n    items;\n    /**\n     * Menu content that will be rendered lazily.\n     * @docs-private\n     */\n    lazyContent;\n    /** Whether the menu should overlap its trigger. */\n    overlapTrigger;\n    /** Whether the menu has a backdrop. */\n    hasBackdrop;\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @param classes list of class names\n     */\n    set panelClass(classes) {\n        const previousPanelClass = this._previousPanelClass;\n        const newClassList = { ...this._classList };\n        if (previousPanelClass && previousPanelClass.length) {\n            previousPanelClass.split(' ').forEach((className) => {\n                newClassList[className] = false;\n            });\n        }\n        this._previousPanelClass = classes;\n        if (classes && classes.length) {\n            classes.split(' ').forEach((className) => {\n                newClassList[className] = true;\n            });\n            this._elementRef.nativeElement.className = '';\n        }\n        this._classList = newClassList;\n    }\n    _previousPanelClass;\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @deprecated Use `panelClass` instead.\n     * @breaking-change 8.0.0\n     */\n    get classList() {\n        return this.panelClass;\n    }\n    set classList(classes) {\n        this.panelClass = classes;\n    }\n    /** Event emitted when the menu is closed. */\n    closed = new EventEmitter();\n    /**\n     * Event emitted when the menu is closed.\n     * @deprecated Switch to `closed` instead\n     * @breaking-change 8.0.0\n     */\n    close = this.closed;\n    panelId = inject(_IdGenerator).getId('mat-menu-panel-');\n    _injector = inject(Injector);\n    constructor() {\n        const defaultOptions = inject(MAT_MENU_DEFAULT_OPTIONS);\n        this.overlayPanelClass = defaultOptions.overlayPanelClass || '';\n        this._xPosition = defaultOptions.xPosition;\n        this._yPosition = defaultOptions.yPosition;\n        this.backdropClass = defaultOptions.backdropClass;\n        this.overlapTrigger = defaultOptions.overlapTrigger;\n        this.hasBackdrop = defaultOptions.hasBackdrop;\n    }\n    ngOnInit() {\n        this.setPositionClasses();\n    }\n    ngAfterContentInit() {\n        this._updateDirectDescendants();\n        this._keyManager = new FocusKeyManager(this._directDescendantItems)\n            .withWrap()\n            .withTypeAhead()\n            .withHomeAndEnd();\n        this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n        // If a user manually (programmatically) focuses a menu item, we need to reflect that focus\n        // change back to the key manager. Note that we don't need to unsubscribe here because _focused\n        // is internal and we know that it gets completed on destroy.\n        this._directDescendantItems.changes\n            .pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._focused))))\n            .subscribe(focusedItem => this._keyManager.updateActiveItem(focusedItem));\n        this._directDescendantItems.changes.subscribe((itemsList) => {\n            // Move focus to another item, if the active item is removed from the list.\n            // We need to debounce the callback, because multiple items might be removed\n            // in quick succession.\n            const manager = this._keyManager;\n            if (this._panelAnimationState === 'enter' && manager.activeItem?._hasFocus()) {\n                const items = itemsList.toArray();\n                const index = Math.max(0, Math.min(items.length - 1, manager.activeItemIndex || 0));\n                if (items[index] && !items[index].disabled) {\n                    manager.setActiveItem(index);\n                }\n                else {\n                    manager.setNextItemActive();\n                }\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._keyManager?.destroy();\n        this._directDescendantItems.destroy();\n        this.closed.complete();\n        this._firstItemFocusRef?.destroy();\n    }\n    /** Stream that emits whenever the hovered menu item changes. */\n    _hovered() {\n        // Coerce the `changes` property because Angular types it as `Observable<any>`\n        const itemChanges = this._directDescendantItems.changes;\n        return itemChanges.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._hovered))));\n    }\n    /*\n     * Registers a menu item with the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    addItem(_item) { }\n    /**\n     * Removes an item from the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    removeItem(_item) { }\n    /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        const manager = this._keyManager;\n        switch (keyCode) {\n            case ESCAPE:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this.closed.emit('keydown');\n                }\n                break;\n            case LEFT_ARROW:\n                if (this.parentMenu && this.direction === 'ltr') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            case RIGHT_ARROW:\n                if (this.parentMenu && this.direction === 'rtl') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            default:\n                if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n                    manager.setFocusOrigin('keyboard');\n                }\n                manager.onKeydown(event);\n                return;\n        }\n    }\n    /**\n     * Focus the first item in the menu.\n     * @param origin Action from which the focus originated. Used to set the correct styling.\n     */\n    focusFirstItem(origin = 'program') {\n        // Wait for `afterNextRender` to ensure iOS VoiceOver screen reader focuses the first item (#24735).\n        this._firstItemFocusRef?.destroy();\n        this._firstItemFocusRef = afterNextRender(() => {\n            let menuPanel = null;\n            if (this._directDescendantItems.length) {\n                // Because the `mat-menuPanel` is at the DOM insertion point, not inside the overlay, we don't\n                // have a nice way of getting a hold of the menuPanel panel. We can't use a `ViewChild` either\n                // because the panel is inside an `ng-template`. We work around it by starting from one of\n                // the items and walking up the DOM.\n                menuPanel = this._directDescendantItems.first._getHostElement().closest('[role=\"menu\"]');\n            }\n            // If an item in the menuPanel is already focused, avoid overriding the focus.\n            if (!menuPanel || !menuPanel.contains(document.activeElement)) {\n                const manager = this._keyManager;\n                manager.setFocusOrigin(origin).setFirstItemActive();\n                // If there's no active item at this point, it means that all the items are disabled.\n                // Move focus to the menuPanel panel so keyboard events like Escape still work. Also this will\n                // give _some_ feedback to screen readers.\n                if (!manager.activeItem && menuPanel) {\n                    menuPanel.focus();\n                }\n            }\n        }, { injector: this._injector });\n    }\n    /**\n     * Resets the active item in the menu. This is used when the menu is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n    resetActiveItem() {\n        this._keyManager.setActiveItem(-1);\n    }\n    /**\n     * @deprecated No longer used and will be removed.\n     * @breaking-change 21.0.0\n     */\n    setElevation(_depth) { }\n    /**\n     * Adds classes to the menu panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * @param posX Position of the menu along the x axis.\n     * @param posY Position of the menu along the y axis.\n     * @docs-private\n     */\n    setPositionClasses(posX = this.xPosition, posY = this.yPosition) {\n        this._classList = {\n            ...this._classList,\n            ['mat-menu-before']: posX === 'before',\n            ['mat-menu-after']: posX === 'after',\n            ['mat-menu-above']: posY === 'above',\n            ['mat-menu-below']: posY === 'below',\n        };\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Starts the enter animation. */\n    _startAnimation() {\n        // @breaking-change 8.0.0 Combine with _resetAnimation.\n        this._panelAnimationState = 'enter';\n    }\n    /** Resets the panel animation to its initial state. */\n    _resetAnimation() {\n        // @breaking-change 8.0.0 Combine with _startAnimation.\n        this._panelAnimationState = 'void';\n    }\n    /** Callback that is invoked when the panel animation completes. */\n    _onAnimationDone(event) {\n        this._animationDone.next(event);\n        this._isAnimating = false;\n    }\n    _onAnimationStart(event) {\n        this._isAnimating = true;\n        // Scroll the content element to the top as soon as the animation starts. This is necessary,\n        // because we move focus to the first item while it's still being animated, which can throw\n        // the browser off when it determines the scroll position. Alternatively we can move focus\n        // when the animation is done, however moving focus asynchronously will interrupt screen\n        // readers which are in the process of reading out the menu already. We take the `element`\n        // from the `event` since we can't use a `ViewChild` to access the pane.\n        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n            event.element.scrollTop = 0;\n        }\n    }\n    /**\n     * Sets up a stream that will keep track of any newly-added menu items and will update the list\n     * of direct descendants. We collect the descendants this way, because `_allItems` can include\n     * items that are part of child menus, and using a custom way of registering items is unreliable\n     * when it comes to maintaining the item order.\n     */\n    _updateDirectDescendants() {\n        this._allItems.changes\n            .pipe(startWith(this._allItems))\n            .subscribe((items) => {\n            this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n            this._directDescendantItems.notifyOnChanges();\n        });\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatMenu, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"19.0.0\", type: MatMenu, isStandalone: true, selector: \"mat-menu\", inputs: { backdropClass: \"backdropClass\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], xPosition: \"xPosition\", yPosition: \"yPosition\", overlapTrigger: [\"overlapTrigger\", \"overlapTrigger\", booleanAttribute], hasBackdrop: [\"hasBackdrop\", \"hasBackdrop\", (value) => (value == null ? null : booleanAttribute(value))], panelClass: [\"class\", \"panelClass\"], classList: \"classList\" }, outputs: { closed: \"closed\", close: \"close\" }, host: { properties: { \"attr.aria-label\": \"null\", \"attr.aria-labelledby\": \"null\", \"attr.aria-describedby\": \"null\" } }, providers: [{ provide: MAT_MENU_PANEL, useExisting: MatMenu }], queries: [{ propertyName: \"lazyContent\", first: true, predicate: MAT_MENU_CONTENT, descendants: true }, { propertyName: \"_allItems\", predicate: MatMenuItem, descendants: true }, { propertyName: \"items\", predicate: MatMenuItem }], viewQueries: [{ propertyName: \"templateRef\", first: true, predicate: TemplateRef, descendants: true }], exportAs: [\"matMenu\"], ngImport: i0, template: \"<ng-template>\\n  <div\\n    class=\\\"mat-mdc-menu-panel\\\"\\n    [id]=\\\"panelId\\\"\\n    [class]=\\\"_classList\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-mdc-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\"mat-menu{display:none}.mat-mdc-menu-content{margin:0;padding:8px 0;outline:0}.mat-mdc-menu-content,.mat-mdc-menu-content .mat-mdc-menu-item .mat-mdc-menu-item-text{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;flex:1;white-space:normal;font-family:var(--mat-menu-item-label-text-font, var(--mat-sys-label-large-font));line-height:var(--mat-menu-item-label-text-line-height, var(--mat-sys-label-large-line-height));font-size:var(--mat-menu-item-label-text-size, var(--mat-sys-label-large-size));letter-spacing:var(--mat-menu-item-label-text-tracking, var(--mat-sys-label-large-tracking));font-weight:var(--mat-menu-item-label-text-weight, var(--mat-sys-label-large-weight))}.mat-mdc-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;box-sizing:border-box;outline:0;border-radius:var(--mat-menu-container-shape, var(--mat-sys-corner-extra-small));background-color:var(--mat-menu-container-color, var(--mat-sys-surface-container));box-shadow:var(--mat-menu-container-elevation-shadow, 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12));will-change:transform,opacity}.mat-mdc-menu-panel.ng-animating{pointer-events:none}.mat-mdc-menu-panel.ng-animating:has(.mat-mdc-menu-content:empty){display:none}@media(forced-colors: active){.mat-mdc-menu-panel{outline:solid 1px}}.mat-mdc-menu-panel .mat-divider{color:var(--mat-menu-divider-color, var(--mat-sys-surface-variant));margin-bottom:var(--mat-menu-divider-bottom-spacing, 8px);margin-top:var(--mat-menu-divider-top-spacing, 8px)}.mat-mdc-menu-item{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;cursor:pointer;width:100%;text-align:left;box-sizing:border-box;color:inherit;font-size:inherit;background:none;text-decoration:none;margin:0;min-height:48px;padding-left:var(--mat-menu-item-leading-spacing, 12px);padding-right:var(--mat-menu-item-trailing-spacing, 12px);-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-mdc-menu-item::-moz-focus-inner{border:0}[dir=rtl] .mat-mdc-menu-item{padding-left:var(--mat-menu-item-trailing-spacing, 12px);padding-right:var(--mat-menu-item-leading-spacing, 12px)}.mat-mdc-menu-item:has(.material-icons,mat-icon,[matButtonIcon]){padding-left:var(--mat-menu-item-with-icon-leading-spacing, 12px);padding-right:var(--mat-menu-item-with-icon-trailing-spacing, 12px)}[dir=rtl] .mat-mdc-menu-item:has(.material-icons,mat-icon,[matButtonIcon]){padding-left:var(--mat-menu-item-with-icon-trailing-spacing, 12px);padding-right:var(--mat-menu-item-with-icon-leading-spacing, 12px)}.mat-mdc-menu-item,.mat-mdc-menu-item:visited,.mat-mdc-menu-item:link{color:var(--mat-menu-item-label-text-color, var(--mat-sys-on-surface))}.mat-mdc-menu-item .mat-icon-no-color,.mat-mdc-menu-item .mat-mdc-menu-submenu-icon{color:var(--mat-menu-item-icon-color, var(--mat-sys-on-surface-variant))}.mat-mdc-menu-item[disabled]{cursor:default;opacity:.38}.mat-mdc-menu-item[disabled]::after{display:block;position:absolute;content:\\\"\\\";top:0;left:0;bottom:0;right:0}.mat-mdc-menu-item:focus{outline:0}.mat-mdc-menu-item .mat-icon{flex-shrink:0;margin-right:var(--mat-menu-item-spacing, 12px);height:var(--mat-menu-item-icon-size, 24px);width:var(--mat-menu-item-icon-size, 24px)}[dir=rtl] .mat-mdc-menu-item{text-align:right}[dir=rtl] .mat-mdc-menu-item .mat-icon{margin-right:0;margin-left:var(--mat-menu-item-spacing, 12px)}.mat-mdc-menu-item:not([disabled]):hover{background-color:var(--mat-menu-item-hover-state-layer-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-hover-state-layer-opacity) * 100%), transparent))}.mat-mdc-menu-item:not([disabled]).cdk-program-focused,.mat-mdc-menu-item:not([disabled]).cdk-keyboard-focused,.mat-mdc-menu-item:not([disabled]).mat-mdc-menu-item-highlighted{background-color:var(--mat-menu-item-focus-state-layer-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-focus-state-layer-opacity) * 100%), transparent))}@media(forced-colors: active){.mat-mdc-menu-item{margin-top:1px}}.mat-mdc-menu-submenu-icon{width:var(--mat-menu-item-icon-size, 24px);height:10px;fill:currentColor;padding-left:var(--mat-menu-item-spacing, 12px)}[dir=rtl] .mat-mdc-menu-submenu-icon{padding-right:var(--mat-menu-item-spacing, 12px);padding-left:0}[dir=rtl] .mat-mdc-menu-submenu-icon polygon{transform:scaleX(-1);transform-origin:center}@media(forced-colors: active){.mat-mdc-menu-submenu-icon{fill:CanvasText}}.mat-mdc-menu-item .mat-mdc-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"], animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatMenu, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-menu', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, exportAs: 'matMenu', host: {\n                        '[attr.aria-label]': 'null',\n                        '[attr.aria-labelledby]': 'null',\n                        '[attr.aria-describedby]': 'null',\n                    }, animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems], providers: [{ provide: MAT_MENU_PANEL, useExisting: MatMenu }], template: \"<ng-template>\\n  <div\\n    class=\\\"mat-mdc-menu-panel\\\"\\n    [id]=\\\"panelId\\\"\\n    [class]=\\\"_classList\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-mdc-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\"mat-menu{display:none}.mat-mdc-menu-content{margin:0;padding:8px 0;outline:0}.mat-mdc-menu-content,.mat-mdc-menu-content .mat-mdc-menu-item .mat-mdc-menu-item-text{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;flex:1;white-space:normal;font-family:var(--mat-menu-item-label-text-font, var(--mat-sys-label-large-font));line-height:var(--mat-menu-item-label-text-line-height, var(--mat-sys-label-large-line-height));font-size:var(--mat-menu-item-label-text-size, var(--mat-sys-label-large-size));letter-spacing:var(--mat-menu-item-label-text-tracking, var(--mat-sys-label-large-tracking));font-weight:var(--mat-menu-item-label-text-weight, var(--mat-sys-label-large-weight))}.mat-mdc-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;box-sizing:border-box;outline:0;border-radius:var(--mat-menu-container-shape, var(--mat-sys-corner-extra-small));background-color:var(--mat-menu-container-color, var(--mat-sys-surface-container));box-shadow:var(--mat-menu-container-elevation-shadow, 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12));will-change:transform,opacity}.mat-mdc-menu-panel.ng-animating{pointer-events:none}.mat-mdc-menu-panel.ng-animating:has(.mat-mdc-menu-content:empty){display:none}@media(forced-colors: active){.mat-mdc-menu-panel{outline:solid 1px}}.mat-mdc-menu-panel .mat-divider{color:var(--mat-menu-divider-color, var(--mat-sys-surface-variant));margin-bottom:var(--mat-menu-divider-bottom-spacing, 8px);margin-top:var(--mat-menu-divider-top-spacing, 8px)}.mat-mdc-menu-item{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;cursor:pointer;width:100%;text-align:left;box-sizing:border-box;color:inherit;font-size:inherit;background:none;text-decoration:none;margin:0;min-height:48px;padding-left:var(--mat-menu-item-leading-spacing, 12px);padding-right:var(--mat-menu-item-trailing-spacing, 12px);-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-mdc-menu-item::-moz-focus-inner{border:0}[dir=rtl] .mat-mdc-menu-item{padding-left:var(--mat-menu-item-trailing-spacing, 12px);padding-right:var(--mat-menu-item-leading-spacing, 12px)}.mat-mdc-menu-item:has(.material-icons,mat-icon,[matButtonIcon]){padding-left:var(--mat-menu-item-with-icon-leading-spacing, 12px);padding-right:var(--mat-menu-item-with-icon-trailing-spacing, 12px)}[dir=rtl] .mat-mdc-menu-item:has(.material-icons,mat-icon,[matButtonIcon]){padding-left:var(--mat-menu-item-with-icon-trailing-spacing, 12px);padding-right:var(--mat-menu-item-with-icon-leading-spacing, 12px)}.mat-mdc-menu-item,.mat-mdc-menu-item:visited,.mat-mdc-menu-item:link{color:var(--mat-menu-item-label-text-color, var(--mat-sys-on-surface))}.mat-mdc-menu-item .mat-icon-no-color,.mat-mdc-menu-item .mat-mdc-menu-submenu-icon{color:var(--mat-menu-item-icon-color, var(--mat-sys-on-surface-variant))}.mat-mdc-menu-item[disabled]{cursor:default;opacity:.38}.mat-mdc-menu-item[disabled]::after{display:block;position:absolute;content:\\\"\\\";top:0;left:0;bottom:0;right:0}.mat-mdc-menu-item:focus{outline:0}.mat-mdc-menu-item .mat-icon{flex-shrink:0;margin-right:var(--mat-menu-item-spacing, 12px);height:var(--mat-menu-item-icon-size, 24px);width:var(--mat-menu-item-icon-size, 24px)}[dir=rtl] .mat-mdc-menu-item{text-align:right}[dir=rtl] .mat-mdc-menu-item .mat-icon{margin-right:0;margin-left:var(--mat-menu-item-spacing, 12px)}.mat-mdc-menu-item:not([disabled]):hover{background-color:var(--mat-menu-item-hover-state-layer-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-hover-state-layer-opacity) * 100%), transparent))}.mat-mdc-menu-item:not([disabled]).cdk-program-focused,.mat-mdc-menu-item:not([disabled]).cdk-keyboard-focused,.mat-mdc-menu-item:not([disabled]).mat-mdc-menu-item-highlighted{background-color:var(--mat-menu-item-focus-state-layer-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-focus-state-layer-opacity) * 100%), transparent))}@media(forced-colors: active){.mat-mdc-menu-item{margin-top:1px}}.mat-mdc-menu-submenu-icon{width:var(--mat-menu-item-icon-size, 24px);height:10px;fill:currentColor;padding-left:var(--mat-menu-item-spacing, 12px)}[dir=rtl] .mat-mdc-menu-submenu-icon{padding-right:var(--mat-menu-item-spacing, 12px);padding-left:0}[dir=rtl] .mat-mdc-menu-submenu-icon polygon{transform:scaleX(-1);transform-origin:center}@media(forced-colors: active){.mat-mdc-menu-submenu-icon{fill:CanvasText}}.mat-mdc-menu-item .mat-mdc-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"] }]\n        }], ctorParameters: () => [], propDecorators: { _allItems: [{\n                type: ContentChildren,\n                args: [MatMenuItem, { descendants: true }]\n            }], backdropClass: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], ariaDescribedby: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], xPosition: [{\n                type: Input\n            }], yPosition: [{\n                type: Input\n            }], templateRef: [{\n                type: ViewChild,\n                args: [TemplateRef]\n            }], items: [{\n                type: ContentChildren,\n                args: [MatMenuItem, { descendants: false }]\n            }], lazyContent: [{\n                type: ContentChild,\n                args: [MAT_MENU_CONTENT]\n            }], overlapTrigger: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], hasBackdrop: [{\n                type: Input,\n                args: [{ transform: (value) => (value == null ? null : booleanAttribute(value)) }]\n            }], panelClass: [{\n                type: Input,\n                args: ['class']\n            }], classList: [{\n                type: Input\n            }], closed: [{\n                type: Output\n            }], close: [{\n                type: Output\n            }] } });\n\n/** Injection token that determines the scroll handling while the menu is open. */\nconst MAT_MENU_SCROLL_STRATEGY = new InjectionToken('mat-menu-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n    },\n});\n/** @docs-private */\nfunction MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_MENU_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Default top padding of the menu panel.\n * @deprecated No longer being used. Will be removed.\n * @breaking-change 15.0.0\n */\nconst MENU_PANEL_TOP_PADDING = 8;\n/** Directive applied to an element that should trigger a `mat-menu`. */\nclass MatMenuTrigger {\n    _overlay = inject(Overlay);\n    _element = inject(ElementRef);\n    _viewContainerRef = inject(ViewContainerRef);\n    _menuItemInstance = inject(MatMenuItem, { optional: true, self: true });\n    _dir = inject(Directionality, { optional: true });\n    _focusMonitor = inject(FocusMonitor);\n    _ngZone = inject(NgZone);\n    _scrollStrategy = inject(MAT_MENU_SCROLL_STRATEGY);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _portal;\n    _overlayRef = null;\n    _menuOpen = false;\n    _closingActionsSubscription = Subscription.EMPTY;\n    _hoverSubscription = Subscription.EMPTY;\n    _menuCloseSubscription = Subscription.EMPTY;\n    /**\n     * We're specifically looking for a `MatMenu` here since the generic `MatMenuPanel`\n     * interface lacks some functionality around nested menus and animations.\n     */\n    _parentMaterialMenu;\n    /**\n     * Cached value of the padding of the parent menu panel.\n     * Used to offset sub-menus to compensate for the padding.\n     */\n    _parentInnerPadding;\n    /**\n     * Handles touch start events on the trigger.\n     * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n     */\n    _handleTouchStart = (event) => {\n        if (!isFakeTouchstartFromScreenReader(event)) {\n            this._openedBy = 'touch';\n        }\n    };\n    // Tracking input type is necessary so it's possible to only auto-focus\n    // the first item of the list when the menu is opened via the keyboard\n    _openedBy = undefined;\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0\n     */\n    get _deprecatedMatMenuTriggerFor() {\n        return this.menu;\n    }\n    set _deprecatedMatMenuTriggerFor(v) {\n        this.menu = v;\n    }\n    /** References the menu instance that the trigger is associated with. */\n    get menu() {\n        return this._menu;\n    }\n    set menu(menu) {\n        if (menu === this._menu) {\n            return;\n        }\n        this._menu = menu;\n        this._menuCloseSubscription.unsubscribe();\n        if (menu) {\n            if (menu === this._parentMaterialMenu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throwMatMenuRecursiveError();\n            }\n            this._menuCloseSubscription = menu.close.subscribe((reason) => {\n                this._destroyMenu(reason);\n                // If a click closed the menu, we should close the entire chain of nested menus.\n                if ((reason === 'click' || reason === 'tab') && this._parentMaterialMenu) {\n                    this._parentMaterialMenu.closed.emit(reason);\n                }\n            });\n        }\n        this._menuItemInstance?._setTriggersSubmenu(this.triggersSubmenu());\n    }\n    _menu;\n    /** Data to be passed along to any lazily-rendered content. */\n    menuData;\n    /**\n     * Whether focus should be restored when the menu is closed.\n     * Note that disabling this option can have accessibility implications\n     * and it's up to you to manage focus, if you decide to turn it off.\n     */\n    restoreFocus = true;\n    /** Event emitted when the associated menu is opened. */\n    menuOpened = new EventEmitter();\n    /**\n     * Event emitted when the associated menu is opened.\n     * @deprecated Switch to `menuOpened` instead\n     * @breaking-change 8.0.0\n     */\n    // tslint:disable-next-line:no-output-on-prefix\n    onMenuOpen = this.menuOpened;\n    /** Event emitted when the associated menu is closed. */\n    menuClosed = new EventEmitter();\n    /**\n     * Event emitted when the associated menu is closed.\n     * @deprecated Switch to `menuClosed` instead\n     * @breaking-change 8.0.0\n     */\n    // tslint:disable-next-line:no-output-on-prefix\n    onMenuClose = this.menuClosed;\n    constructor() {\n        const parentMenu = inject(MAT_MENU_PANEL, { optional: true });\n        this._parentMaterialMenu = parentMenu instanceof MatMenu ? parentMenu : undefined;\n        this._element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n    }\n    ngAfterContentInit() {\n        this._handleHover();\n    }\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n        this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n        this._menuCloseSubscription.unsubscribe();\n        this._closingActionsSubscription.unsubscribe();\n        this._hoverSubscription.unsubscribe();\n    }\n    /** Whether the menu is open. */\n    get menuOpen() {\n        return this._menuOpen;\n    }\n    /** The text direction of the containing app. */\n    get dir() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /** Whether the menu triggers a sub-menu or a top-level one. */\n    triggersSubmenu() {\n        return !!(this._menuItemInstance && this._parentMaterialMenu && this.menu);\n    }\n    /** Toggles the menu between the open and closed states. */\n    toggleMenu() {\n        return this._menuOpen ? this.closeMenu() : this.openMenu();\n    }\n    /** Opens the menu. */\n    openMenu() {\n        const menu = this.menu;\n        if (this._menuOpen || !menu) {\n            return;\n        }\n        const overlayRef = this._createOverlay(menu);\n        const overlayConfig = overlayRef.getConfig();\n        const positionStrategy = overlayConfig.positionStrategy;\n        this._setPosition(menu, positionStrategy);\n        overlayConfig.hasBackdrop =\n            menu.hasBackdrop == null ? !this.triggersSubmenu() : menu.hasBackdrop;\n        overlayRef.attach(this._getPortal(menu));\n        if (menu.lazyContent) {\n            menu.lazyContent.attach(this.menuData);\n        }\n        this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n        this._initMenu(menu);\n        if (menu instanceof MatMenu) {\n            menu._startAnimation();\n            menu._directDescendantItems.changes.pipe(takeUntil(menu.close)).subscribe(() => {\n                // Re-adjust the position without locking when the amount of items\n                // changes so that the overlay is allowed to pick a new optimal position.\n                positionStrategy.withLockedPosition(false).reapplyLastPosition();\n                positionStrategy.withLockedPosition(true);\n            });\n        }\n    }\n    /** Closes the menu. */\n    closeMenu() {\n        this.menu?.close.emit();\n    }\n    /**\n     * Focuses the menu trigger.\n     * @param origin Source of the menu trigger's focus.\n     */\n    focus(origin, options) {\n        if (this._focusMonitor && origin) {\n            this._focusMonitor.focusVia(this._element, origin, options);\n        }\n        else {\n            this._element.nativeElement.focus(options);\n        }\n    }\n    /**\n     * Updates the position of the menu to ensure that it fits all options within the viewport.\n     */\n    updatePosition() {\n        this._overlayRef?.updatePosition();\n    }\n    /** Closes the menu and does the necessary cleanup. */\n    _destroyMenu(reason) {\n        if (!this._overlayRef || !this.menuOpen) {\n            return;\n        }\n        const menu = this.menu;\n        this._closingActionsSubscription.unsubscribe();\n        this._overlayRef.detach();\n        // Always restore focus if the user is navigating using the keyboard or the menu was opened\n        // programmatically. We don't restore for non-root triggers, because it can prevent focus\n        // from making it back to the root trigger when closing a long chain of menus by clicking\n        // on the backdrop.\n        if (this.restoreFocus && (reason === 'keydown' || !this._openedBy || !this.triggersSubmenu())) {\n            this.focus(this._openedBy);\n        }\n        this._openedBy = undefined;\n        if (menu instanceof MatMenu) {\n            menu._resetAnimation();\n            if (menu.lazyContent) {\n                // Wait for the exit animation to finish before detaching the content.\n                menu._animationDone\n                    .pipe(filter(event => event.toState === 'void'), take(1), \n                // Interrupt if the content got re-attached.\n                takeUntil(menu.lazyContent._attached))\n                    .subscribe({\n                    next: () => menu.lazyContent.detach(),\n                    // No matter whether the content got re-attached, reset the menu.\n                    complete: () => this._setIsMenuOpen(false),\n                });\n            }\n            else {\n                this._setIsMenuOpen(false);\n            }\n        }\n        else {\n            this._setIsMenuOpen(false);\n            menu?.lazyContent?.detach();\n        }\n    }\n    /**\n     * This method sets the menu state to open and focuses the first item if\n     * the menu was opened via the keyboard.\n     */\n    _initMenu(menu) {\n        menu.parentMenu = this.triggersSubmenu() ? this._parentMaterialMenu : undefined;\n        menu.direction = this.dir;\n        menu.focusFirstItem(this._openedBy || 'program');\n        this._setIsMenuOpen(true);\n    }\n    // set state rather than toggle to support triggers sharing a menu\n    _setIsMenuOpen(isOpen) {\n        if (isOpen !== this._menuOpen) {\n            this._menuOpen = isOpen;\n            this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n            if (this.triggersSubmenu()) {\n                this._menuItemInstance._setHighlighted(isOpen);\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * This method creates the overlay from the provided menu's template and saves its\n     * OverlayRef so that it can be attached to the DOM when openMenu is called.\n     */\n    _createOverlay(menu) {\n        if (!this._overlayRef) {\n            const config = this._getOverlayConfig(menu);\n            this._subscribeToPositions(menu, config.positionStrategy);\n            this._overlayRef = this._overlay.create(config);\n            this._overlayRef.keydownEvents().subscribe(event => {\n                if (this.menu instanceof MatMenu) {\n                    this.menu._handleKeydown(event);\n                }\n            });\n        }\n        return this._overlayRef;\n    }\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n    _getOverlayConfig(menu) {\n        return new OverlayConfig({\n            positionStrategy: this._overlay\n                .position()\n                .flexibleConnectedTo(this._element)\n                .withLockedPosition()\n                .withGrowAfterOpen()\n                .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n            backdropClass: menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n            panelClass: menu.overlayPanelClass,\n            scrollStrategy: this._scrollStrategy(),\n            direction: this._dir || 'ltr',\n        });\n    }\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the menu based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     */\n    _subscribeToPositions(menu, position) {\n        if (menu.setPositionClasses) {\n            position.positionChanges.subscribe(change => {\n                this._ngZone.run(() => {\n                    const posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n                    const posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n                    menu.setPositionClasses(posX, posY);\n                });\n            });\n        }\n    }\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n    _setPosition(menu, positionStrategy) {\n        let [originX, originFallbackX] = menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n        let [overlayY, overlayFallbackY] = menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n        let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n        let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n        let offsetY = 0;\n        if (this.triggersSubmenu()) {\n            // When the menu is a sub-menu, it should always align itself\n            // to the edges of the trigger, instead of overlapping it.\n            overlayFallbackX = originX = menu.xPosition === 'before' ? 'start' : 'end';\n            originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            if (this._parentMaterialMenu) {\n                if (this._parentInnerPadding == null) {\n                    const firstItem = this._parentMaterialMenu.items.first;\n                    this._parentInnerPadding = firstItem ? firstItem._getHostElement().offsetTop : 0;\n                }\n                offsetY = overlayY === 'bottom' ? this._parentInnerPadding : -this._parentInnerPadding;\n            }\n        }\n        else if (!menu.overlapTrigger) {\n            originY = overlayY === 'top' ? 'bottom' : 'top';\n            originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n        }\n        positionStrategy.withPositions([\n            { originX, originY, overlayX, overlayY, offsetY },\n            { originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY },\n            {\n                originX,\n                originY: originFallbackY,\n                overlayX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY,\n            },\n            {\n                originX: originFallbackX,\n                originY: originFallbackY,\n                overlayX: overlayFallbackX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY,\n            },\n        ]);\n    }\n    /** Returns a stream that emits whenever an action that should close the menu occurs. */\n    _menuClosingActions() {\n        const backdrop = this._overlayRef.backdropClick();\n        const detachments = this._overlayRef.detachments();\n        const parentClose = this._parentMaterialMenu ? this._parentMaterialMenu.closed : of();\n        const hover = this._parentMaterialMenu\n            ? this._parentMaterialMenu._hovered().pipe(filter(active => active !== this._menuItemInstance), filter(() => this._menuOpen))\n            : of();\n        return merge(backdrop, parentClose, hover, detachments);\n    }\n    /** Handles mouse presses on the trigger. */\n    _handleMousedown(event) {\n        if (!isFakeMousedownFromScreenReader(event)) {\n            // Since right or middle button clicks won't trigger the `click` event,\n            // we shouldn't consider the menu as opened by mouse in those cases.\n            this._openedBy = event.button === 0 ? 'mouse' : undefined;\n            // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n            // we should prevent focus from moving onto it via click to avoid the\n            // highlight from lingering on the menu item.\n            if (this.triggersSubmenu()) {\n                event.preventDefault();\n            }\n        }\n    }\n    /** Handles key presses on the trigger. */\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        // Pressing enter on the trigger will trigger the click handler later.\n        if (keyCode === ENTER || keyCode === SPACE) {\n            this._openedBy = 'keyboard';\n        }\n        if (this.triggersSubmenu() &&\n            ((keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n                (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n            this._openedBy = 'keyboard';\n            this.openMenu();\n        }\n    }\n    /** Handles click events on the trigger. */\n    _handleClick(event) {\n        if (this.triggersSubmenu()) {\n            // Stop event propagation to avoid closing the parent menu.\n            event.stopPropagation();\n            this.openMenu();\n        }\n        else {\n            this.toggleMenu();\n        }\n    }\n    /** Handles the cases where the user hovers over the trigger. */\n    _handleHover() {\n        // Subscribe to changes in the hovered item in order to toggle the panel.\n        if (!this.triggersSubmenu() || !this._parentMaterialMenu) {\n            return;\n        }\n        this._hoverSubscription = this._parentMaterialMenu\n            ._hovered()\n            // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n            // with different data and triggers), we have to delay it by a tick to ensure that\n            // it won't be closed immediately after it is opened.\n            .pipe(filter(active => active === this._menuItemInstance && !active.disabled), delay(0, asapScheduler))\n            .subscribe(() => {\n            this._openedBy = 'mouse';\n            // If the same menu is used between multiple triggers, it might still be animating\n            // while the new trigger tries to re-open it. Wait for the animation to finish\n            // before doing so. Also interrupt if the user moves to another item.\n            if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n                // We need the `delay(0)` here in order to avoid\n                // 'changed after checked' errors in some cases. See #12194.\n                this.menu._animationDone\n                    .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMaterialMenu._hovered()))\n                    .subscribe(() => this.openMenu());\n            }\n            else {\n                this.openMenu();\n            }\n        });\n    }\n    /** Gets the portal that should be attached to the overlay. */\n    _getPortal(menu) {\n        // Note that we can avoid this check by keeping the portal on the menu panel.\n        // While it would be cleaner, we'd have to introduce another required method on\n        // `MatMenuPanel`, making it harder to consume.\n        if (!this._portal || this._portal.templateRef !== menu.templateRef) {\n            this._portal = new TemplatePortal(menu.templateRef, this._viewContainerRef);\n        }\n        return this._portal;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatMenuTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatMenuTrigger, isStandalone: true, selector: \"[mat-menu-trigger-for], [matMenuTriggerFor]\", inputs: { _deprecatedMatMenuTriggerFor: [\"mat-menu-trigger-for\", \"_deprecatedMatMenuTriggerFor\"], menu: [\"matMenuTriggerFor\", \"menu\"], menuData: [\"matMenuTriggerData\", \"menuData\"], restoreFocus: [\"matMenuTriggerRestoreFocus\", \"restoreFocus\"] }, outputs: { menuOpened: \"menuOpened\", onMenuOpen: \"onMenuOpen\", menuClosed: \"menuClosed\", onMenuClose: \"onMenuClose\" }, host: { listeners: { \"click\": \"_handleClick($event)\", \"mousedown\": \"_handleMousedown($event)\", \"keydown\": \"_handleKeydown($event)\" }, properties: { \"attr.aria-haspopup\": \"menu ? \\\"menu\\\" : null\", \"attr.aria-expanded\": \"menuOpen\", \"attr.aria-controls\": \"menuOpen ? menu.panelId : null\" }, classAttribute: \"mat-mdc-menu-trigger\" }, exportAs: [\"matMenuTrigger\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatMenuTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n                    host: {\n                        'class': 'mat-mdc-menu-trigger',\n                        '[attr.aria-haspopup]': 'menu ? \"menu\" : null',\n                        '[attr.aria-expanded]': 'menuOpen',\n                        '[attr.aria-controls]': 'menuOpen ? menu.panelId : null',\n                        '(click)': '_handleClick($event)',\n                        '(mousedown)': '_handleMousedown($event)',\n                        '(keydown)': '_handleKeydown($event)',\n                    },\n                    exportAs: 'matMenuTrigger',\n                }]\n        }], ctorParameters: () => [], propDecorators: { _deprecatedMatMenuTriggerFor: [{\n                type: Input,\n                args: ['mat-menu-trigger-for']\n            }], menu: [{\n                type: Input,\n                args: ['matMenuTriggerFor']\n            }], menuData: [{\n                type: Input,\n                args: ['matMenuTriggerData']\n            }], restoreFocus: [{\n                type: Input,\n                args: ['matMenuTriggerRestoreFocus']\n            }], menuOpened: [{\n                type: Output\n            }], onMenuOpen: [{\n                type: Output\n            }], menuClosed: [{\n                type: Output\n            }], onMenuClose: [{\n                type: Output\n            }] } });\n\nclass MatMenuModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatMenuModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.0.0\", ngImport: i0, type: MatMenuModule, imports: [MatRippleModule,\n            MatCommonModule,\n            OverlayModule,\n            MatMenu,\n            MatMenuItem,\n            MatMenuContent,\n            MatMenuTrigger], exports: [CdkScrollableModule,\n            MatMenu,\n            MatCommonModule,\n            MatMenuItem,\n            MatMenuContent,\n            MatMenuTrigger] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatMenuModule, providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [MatRippleModule,\n            MatCommonModule,\n            OverlayModule, CdkScrollableModule,\n            MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatMenuModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        MatRippleModule,\n                        MatCommonModule,\n                        OverlayModule,\n                        MatMenu,\n                        MatMenuItem,\n                        MatMenuContent,\n                        MatMenuTrigger,\n                    ],\n                    exports: [\n                        CdkScrollableModule,\n                        MatMenu,\n                        MatCommonModule,\n                        MatMenuItem,\n                        MatMenuContent,\n                        MatMenuTrigger,\n                    ],\n                    providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_MENU_CONTENT, MAT_MENU_DEFAULT_OPTIONS, MAT_MENU_PANEL, MAT_MENU_SCROLL_STRATEGY, MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER, MENU_PANEL_TOP_PADDING, MatMenu, MatMenuContent, MatMenuItem, MatMenuModule, MatMenuTrigger, fadeInItems, matMenuAnimations, transformMenu };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}